<!-- =======================================================================
  Xceed DataGrid for WPF - CUSTOMIZATION CODE - Default Styles and Templates
  Copyright (c) 2007-2009 Xceed Software Inc.

  [CompactCardView.Zune.normalcolor.xaml]

  This file is part of the Xceed DataGrid for WPF product. The use and
  distribution of this Customization Code is subject to the terms
  and conditions refering to "Customization Code" that are specified in
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
======================================================================= -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xcdp="clr-namespace:Xceed.Wpf.Controls;assembly=Xceed.Wpf.Controls"
                    xmlns:local="clr-namespace:Xceed.Wpf.DataGrid"
                    xmlns:conv="clr-namespace:Xceed.Wpf.DataGrid.Converters"
                    xmlns:markup="clr-namespace:Xceed.Wpf.DataGrid.Markup"
                    xmlns:views="clr-namespace:Xceed.Wpf.DataGrid.Views"
                    xmlns:utils="clr-namespace:Xceed.Utils.Wpf.Markup">

	<ResourceDictionary.MergedDictionaries>

		<!-- Include the view independant, color-scheme independant, theme resources -->
		<ResourceDictionary Source="Resources/Zune.Resources.xaml" />

		<!-- Include the view dependant, color-scheme independant, theme graphics -->
		<ResourceDictionary Source="Resources/CardView.Zune.Graphics.xaml" />

		<!-- Include the view independant, color-scheme dependant, theme resources -->
		<ResourceDictionary Source="Resources/Zune.normalcolor.Resources.xaml" />

		<!-- Include the standard grid element templates -->
		<ResourceDictionary Source="../Common/CompactCardView.GridElementTemplates.xaml" />

	</ResourceDictionary.MergedDictionaries>

	<!-- =================================================================== -->
	<!-- Resources specific to this View/Theme/ColorScheme                   -->
	<!-- =================================================================== -->

	<SolidColorBrush x:Key="gridControlBorderBrush"
						  Color="#C2C2C2"/>

	<LinearGradientBrush x:Key="selectionBackgroundBrush"
								StartPoint="0,1"
								EndPoint="0,0">

		<GradientStop Color="#9F3F05"
						  Offset="0" />

		<GradientStop Color="#B94C09"
						  Offset="0.48" />

		<GradientStop Color="#FF5400"
						  Offset="0.48" />

		<GradientStop Color="#FFA96A"
						  Offset="1" />

	</LinearGradientBrush>

	<SolidColorBrush x:Key="selectionForegroundBrush"
						  Color="White" />

	<LinearGradientBrush x:Key="selectionBorderBrush"
								StartPoint="0.5,1"
								EndPoint="0.5,0">

		<GradientStop Color="#C95C19"
						  Offset="0" />

		<GradientStop Color="#FF8841"
						  Offset="0.5" />

		<GradientStop Color="#FFC494"
						  Offset="1" />

	</LinearGradientBrush>

	<LinearGradientBrush x:Key="inactiveCompactCardTitleBackgroundBrush"
								StartPoint="0,1"
								EndPoint="0,0">

		<GradientStop Color="#FF565656"
						  Offset="0" />

		<GradientStop Color="#FF686868"
						  Offset="0.48" />

		<GradientStop Color="#FF777777"
						  Offset="0.48" />

		<GradientStop Color="#FFD0D0D0"
						  Offset="1" />

	</LinearGradientBrush>


	<SolidColorBrush x:Key="inactiveSelectionBorderBrush"
						  Color="Gray"/>

	<SolidColorBrush x:Key="inactiveSelectionForegroundBrush"
						  Color="White" />

	<SolidColorBrush x:Key="compactCardBorderBrush"
						  Color="#BE510E" />

	<SolidColorBrush x:Key="groupHeaderBackgroundBrush"
						  Color="#454545" />

	<SolidColorBrush x:Key="groupHeaderForegroundBrush"
						  Color="#DADADA" />

	<SolidColorBrush x:Key="groupHeaderBorderBrush"
						  Color="White" />

    <SolidColorBrush x:Key="warningBackgroundBrush"
                     Color="#FFC400" />

    <SolidColorBrush x:Key="warningForegroundBrush"
                     Color="Black" />

    <LinearGradientBrush x:Key="compactCardTitleBorderBrush"
								StartPoint="0.5,1"
								EndPoint="0.5,0">

		<GradientStop Color="#FFc95c19"
						  Offset="0" />

		<GradientStop Color="#FFff8841"
						  Offset="0.5" />

		<GradientStop Color="#FFffc494"
						  Offset="1" />

	</LinearGradientBrush>

	<LinearGradientBrush x:Key="compactCardTitleBackgroundBrush"
								StartPoint="0.5,1"
								EndPoint="0.5,0">

		<GradientStop Color="#C95C19"
						  Offset="0" />

		<GradientStop Color="#B94C09"
						  Offset="0.48" />

		<GradientStop Color="#F05A1A"
						  Offset="0.48" />

		<GradientStop Color="#FFA96A"
						  Offset="1" />

	</LinearGradientBrush>

	<SolidColorBrush x:Key="compactCardTitleForegroundBrush"
						  Color="#FFEDC8" />

	<LinearGradientBrush x:Key="compactCardTitleErrorBackgroundBrush"
								StartPoint="0.5,1"
								EndPoint="0.5,0">

		<GradientStop Offset="0"
						  Color="#990000" />

		<GradientStop Offset="0.9"
						  Color="#FD0000" />

		<GradientStop Offset="1"
						  Color="#FF0000" />

	</LinearGradientBrush>

	<SolidColorBrush x:Key="compactCardTitleErrorForegroundBrush"
						  Color="White" />

	<SolidColorBrush x:Key="columnManagerRowBackgroundBrush"
						  Color="#3267B8" />

	<SolidColorBrush x:Key="columnManagerRowForegroundBrush"
						  Color="White" />

	<LinearGradientBrush x:Key="groupByControlBackgroundBrush"
								EndPoint="0.5,0"
								StartPoint="0.5,1">

		<GradientStop Color="#FF454545"
						  Offset="0"/>

		<GradientStop Color="#7F7F7F"
						  Offset="1"/>

	</LinearGradientBrush>

	<SolidColorBrush x:Key="columnManagerCellHotBorderBrush"
						  Color="#55FFFFFF" />

	<LinearGradientBrush x:Key="columnManagerCellHotBackgroundBrush"
								StartPoint="0,1"
								EndPoint="0,0">

		<GradientStop	Offset="0"
						  Color="#55FFFFFF" />

		<GradientStop	Offset="0.2"
						  Color="#00FFFFFF" />

		<GradientStop	Offset="1"
						  Color="#55FFFFFF" />

	</LinearGradientBrush>

	<SolidColorBrush x:Key="columnManagerCellPressedBorderBrush"
						  Color="#88FFFFFF" />

	<LinearGradientBrush x:Key="columnManagerCellPressedBackgroundBrush"
								StartPoint="0,1"
								EndPoint="0,0">

		<GradientStop	Offset="0"
						  Color="#66FFFFFF" />

		<GradientStop	Offset="0.2"
						  Color="#33FFFFFF" />

		<GradientStop	Offset="1"
						  Color="#66FFFFFF" />

	</LinearGradientBrush>

	<SolidColorBrush x:Key="groupByControlForegroundBrush"
						  Color="White" />

	<SolidColorBrush x:Key="groupByItemBorderBrush"
						  Color="#454545" />

	<LinearGradientBrush x:Key="groupByItemBackgroundBrush"
								StartPoint="0,1"
								EndPoint="0,0.0">

		<GradientStop Color="#525252"
						  Offset="0" />
		<GradientStop Color="#959595"
						  Offset="1" />

	</LinearGradientBrush>

	<SolidColorBrush x:Key="groupByItemForegroundBrush"
						  Color="White" />

	<LinearGradientBrush x:Key="groupByItemHotBackgroundBrush"
								StartPoint="0,0"
								EndPoint="0,1">

		<GradientStop Color="#6E6E6E"
						  Offset="0" />

		<GradientStop Color="#AEAEAE"
						  Offset="1" />


	</LinearGradientBrush>

	<LinearGradientBrush x:Key="groupByItemPressedBackgroundBrush"
								StartPoint="0,0"
								EndPoint="0,1">

		<GradientStop Color="#525252"
						  Offset="0" />

		<GradientStop Color="#959595"
						  Offset="1" />

	</LinearGradientBrush>

	<Pen x:Key="cardSeparatorLinePen"
		  Thickness="1"
		  Pen.Brush="#C2C2C2"/>


	<!-- =================================================================== -->
	<!-- Templates specific to this View/Theme/ColorScheme                   -->
	<!-- =================================================================== -->

   <!--**************************
    * TEMPLATE: Row 
    ************************** -->
	<ControlTemplate x:Key="compactCardViewRowTemplate"
						  TargetType="local:Row">

		<Grid>

			<Border x:Name="rootBorder"
					  Background="{TemplateBinding Background}"
					  BorderThickness="1"
					  Padding="{TemplateBinding Padding}"
					  BorderBrush="Transparent">

				<!-- In CompactCardView, a Row is represented as a compactCard with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
				<DockPanel>

					<Border x:Name="externalBorder"
							  BorderThickness="1"
							  BorderBrush="{TemplateBinding BorderBrush}"
							  DockPanel.Dock="Top">

						<!-- Border that contains the Title of the CompactCard. -->
						<Border x:Name="compactCardTitleBorder"
								  DockPanel.Dock="Top"
								  BorderBrush="{StaticResource compactCardTitleBorderBrush}"
								  BorderThickness="1"
								  Padding="3,1,3,3"
								  Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
								  TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
								  TextElement.FontWeight="Bold">


							<!-- ContentPresenter in charge of displaying the CompactCard Title. -->
							<ContentPresenter x:Name="compactCardTitlePresenter"
													Content="{Binding}"
													ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleTemplate}"
													MinHeight="15"
													HorizontalAlignment="Left"
													VerticalAlignment="Center" />
						</Border>

					</Border>

					<!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
					<StackPanel x:Name="PART_CellsHost"
									Orientation="Vertical"
									Margin="3"
									Grid.IsSharedSizeScope="True"/>
				</DockPanel>
			</Border>

			<!-- ContentPresenter in charge of displaying the glyph that represents
              the state of the row (like IsBeingEdited) -->
			<ContentPresenter x:Name="glyphPresenter"
									Content="{x:Null}"
									ContentTemplate="{x:Null}"
									HorizontalAlignment="Right"
									VerticalAlignment="Top"/>
		</Grid>

		<ControlTemplate.Triggers>

			<!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="True"/>

				</MultiDataTrigger.Conditions>

				<Setter TargetName="compactCardTitleBorder"
						  Property="Background"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

				<Setter TargetName="compactCardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />

				<Setter TargetName="compactCardTitleBorder"
						  Property="BorderBrush"
						  Value="{StaticResource selectionBorderBrush}" />


			</MultiDataTrigger>

			<!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="False"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=HideSelection}"
								  Value="False" />

				</MultiDataTrigger.Conditions>


				<Setter TargetName="compactCardTitleBorder"
						  Property="Background"
						  Value="{StaticResource inactiveCompactCardTitleBackgroundBrush}"/>

				<Setter TargetName="compactCardTitleBorder"
						  Property="BorderBrush"
						  Value="{StaticResource inactiveSelectionBorderBrush}"/>

				<Setter TargetName="compactCardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

			</MultiDataTrigger>

			<MultiTrigger>
				<MultiTrigger.Conditions>

					<Condition Property="IsCurrent"
								  Value="True" />

					<Condition Property="IsBeingEdited"
								  Value="False" />

				</MultiTrigger.Conditions>

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CurrentItemGlyph}" />

				<Setter TargetName="externalBorder"
						  Property="BorderBrush"
						  Value="{StaticResource compactCardTitleBorderBrush}"/>

				<Setter TargetName="externalBorder"
						  Property="BorderThickness"
						  Value="1"/>

				<Setter TargetName="rootBorder"
						  Property="BorderBrush"
						  Value="#702A00"/>

				<Setter TargetName="rootBorder"
						  Property="BorderThickness"
						  Value="1"/>

			</MultiTrigger>

			<Trigger Property="IsBeingEdited"
						Value="True">

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).EditingRowGlyph}" />

				<Setter TargetName="externalBorder"
						  Property="BorderBrush"
						  Value="{StaticResource compactCardTitleBorderBrush}"/>

				<Setter TargetName="externalBorder"
						  Property="BorderThickness"
						  Value="1"/>

				<Setter TargetName="rootBorder"
						  Property="BorderBrush"
						  Value="#702A00"/>

				<Setter TargetName="rootBorder"
						  Property="BorderThickness"
						  Value="1"/>

			</Trigger>

			<Trigger Property="HasValidationError"
						Value="True">

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ValidationErrorGlyph}" />

				<Setter TargetName="compactCardTitleBorder"
						  Property="Background"
						  Value="{StaticResource compactCardTitleErrorBackgroundBrush}" />

				<Setter TargetName="compactCardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{StaticResource compactCardTitleErrorForegroundBrush}" />

			</Trigger>

		</ControlTemplate.Triggers>

	</ControlTemplate>

	<!--**************************
    * TEMPLATE: InsertionRow 
    ************************** -->
	<ControlTemplate x:Key="compactCardViewInsertionRowTemplate"
						  TargetType="local:InsertionRow">

		<Grid>

			<Border x:Name="rootBorder"
					  Background="{TemplateBinding Background}"
					  BorderBrush="{TemplateBinding BorderBrush}"
					  BorderThickness="{TemplateBinding BorderThickness}"
					  Padding="{TemplateBinding Padding}">

				<!-- In CompactCardView, a Row is represented as a compactCard with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
				<DockPanel x:Name="PART_RowFocusRoot">

					<Border BorderThickness="1"
							  BorderBrush="{TemplateBinding BorderBrush}"
							  DockPanel.Dock="Top">

						<!-- Border that contains the Title of the CompactCard. -->
						<Border x:Name="compactCardTitleBorder"
								  DockPanel.Dock="Top"
								  BorderBrush="{StaticResource compactCardTitleBorderBrush}"
								  BorderThickness="1"
								  Padding="3,1,3,3"
								  Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
								  TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
								  TextElement.FontWeight="Bold">

							<!-- ContentPresenter in charge of displaying the CompactCard Title. -->
							<ContentPresenter x:Name="compactCardTitlePresenter"
													ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).InsertionCardTitleTemplate}"
													MinHeight="15"
													HorizontalAlignment="Left"
													VerticalAlignment="Center" />



						</Border>
					</Border>


					<!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
					<StackPanel x:Name="PART_CellsHost"
									Orientation="Vertical"
									Visibility="Collapsed"
									Margin="3"
									Grid.IsSharedSizeScope="True" />

				</DockPanel>
			</Border>

			<!-- ContentPresenter in charge of displaying the glyph that represents
              the state of the row (like IsBeingEdited) -->
			<ContentPresenter x:Name="glyphPresenter"
									Content="{x:Null}"
									ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).InsertionRowGlyph}"
									HorizontalAlignment="Right"
									VerticalAlignment="Top" />
		</Grid>

		<ControlTemplate.Triggers>

			<!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="True"/>

				</MultiDataTrigger.Conditions>

				<Setter TargetName="compactCardTitleBorder"
						  Property="Background"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

				<Setter TargetName="compactCardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />

				<Setter TargetName="rootBorder"
						  Property="BorderBrush"
						  Value="#702A00"/>

			</MultiDataTrigger>

			<!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="False"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=HideSelection}"
								  Value="False" />

				</MultiDataTrigger.Conditions>

				<Setter TargetName="compactCardTitleBorder"
						  Property="Background"
						  Value="{StaticResource inactiveCompactCardTitleBackgroundBrush}"/>

				<Setter TargetName="compactCardTitleBorder"
						  Property="BorderBrush"
						  Value="{StaticResource inactiveSelectionBorderBrush}"/>

				<Setter TargetName="compactCardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

			</MultiDataTrigger>

			<Trigger Property="IsCurrent"
						Value="True">

				<Setter TargetName="PART_CellsHost"
						  Property="Visibility"
						  Value="Visible" />

				<Setter TargetName="compactCardTitleBorder"
						  Property="KeyboardNavigation.IsTabStop"
						  Value="False"/>

			</Trigger>

			<MultiTrigger>
				<MultiTrigger.Conditions>

					<Condition Property="IsCurrent"
								  Value="True" />

					<Condition Property="IsBeingEdited"
								  Value="False" />

				</MultiTrigger.Conditions>

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CurrentItemGlyph}" />

			</MultiTrigger>

			<Trigger Property="IsBeingEdited"
						Value="True">

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).EditingRowGlyph}" />

				<Setter TargetName="PART_CellsHost"
						  Property="Visibility"
						  Value="Visible" />

			</Trigger>

			<Trigger Property="HasValidationError"
						Value="True">

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ValidationErrorGlyph}" />

				<Setter TargetName="compactCardTitleBorder"
						  Property="Background"
						  Value="{StaticResource compactCardTitleErrorBackgroundBrush}" />

				<Setter TargetName="compactCardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{StaticResource compactCardTitleErrorForegroundBrush}" />

			</Trigger>

			<Trigger Property="NavigationBehavior"
						Value="CellOnly">

				<Setter TargetName="compactCardTitleBorder"
						  Property="Focusable"
                    
						  Value="True"/>
			</Trigger>

		</ControlTemplate.Triggers>

	</ControlTemplate>


   <!--**************************
    * TEMPLATE: FilterRow 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewFilterRowTemplate"
						  TargetType="local:FilterRow">

      <Grid>

         <Border x:Name="rootBorder"
					  Background="{TemplateBinding Background}"
					  BorderBrush="{TemplateBinding BorderBrush}"
					  BorderThickness="{TemplateBinding BorderThickness}"
					  Padding="{TemplateBinding Padding}">

            <!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
            <DockPanel x:Name="PART_RowFocusRoot">

               <!-- Border that contains the Title of the Card. -->
               <Border x:Name="cardTitleBorder"
							  DockPanel.Dock="Top"
							  BorderBrush="{TemplateBinding BorderBrush}"
							  BorderThickness="1"
							  Padding="3,1,3,3"
							  Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
							  TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
							  TextElement.FontWeight="Bold">

                  <!-- ContentPresenter in charge of displaying the Card Title. -->
                  <ContentPresenter x:Name="cardTitlePresenter"
												ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FilterCardTitleTemplate}"
												MinHeight="15"
												HorizontalAlignment="Left"
												VerticalAlignment="Center" />

               </Border>

               <!-- Border that contails the Cells. -->
               <Border x:Name="cellsHostBorder"
							  BorderBrush="{TemplateBinding BorderBrush}"
							  BorderThickness="1,0,1,1"
							  Padding="3">

                  <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                       It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                       SharedSizeGroup to layout the field names. -->
                  <StackPanel x:Name="PART_CellsHost"
										Orientation="Vertical"                              
										Visibility="Visible"
										Grid.IsSharedSizeScope="True" />

               </Border>
            </DockPanel>
         </Border>

         <!-- ContentPresenter in charge of displaying the glyph that represents
              the state of the row (like IsBeingEdited) -->
         <ContentPresenter x:Name="glyphPresenter"
									Content="{x:Null}"
									ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FilterRowGlyph}"
									HorizontalAlignment="Right"
									VerticalAlignment="Top" />
      </Grid>

      <ControlTemplate.Triggers>

         <!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
								  Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="True"/>

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
						  Property="Background"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

            <Setter TargetName="cardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />

         </MultiDataTrigger>

         <!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
								  Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="False"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=HideSelection}"
								  Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
						  Property="Background"
						  Value="{StaticResource inactiveCompactCardTitleBackgroundBrush}" />

            <Setter TargetName="cardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />            

         </MultiDataTrigger>

         <Trigger Property="IsCurrent"
						Value="False">

            <Setter TargetName="cellsHostBorder"
						  Property="BorderBrush"
						  Value="Transparent" />

         </Trigger>

         <Trigger Property="NavigationBehavior"
                  Value="CellOnly">
           <Setter TargetName="cardTitleBorder"
                   Property="Focusable"
                   Value="True" />
         </Trigger>

    </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
     * TEMPLATE: FilterToggleButton
      **************************-->
	<ControlTemplate TargetType="{x:Type ToggleButton}"
						  x:Key="filterToggleButton">

		<Grid Background="Transparent"
				VerticalAlignment="Stretch"
				HorizontalAlignment="Stretch">

			<Grid Width="20"
					Background="Transparent"
					HorizontalAlignment="Center">

				<ContentPresenter x:Name="glyphPresenter"
										ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"
										Content="{TemplateBinding Content}"
										VerticalAlignment="Center"
										HorizontalAlignment="Center"
										Margin="0,0,0,0"
										Opacity="{TemplateBinding Opacity}"/>

				<ContentPresenter x:Name="filterActivatedGlyphPresenter"
										ContentTemplate="{x:Null}"
										Content="{TemplateBinding Content}"
										VerticalAlignment="Center"
										HorizontalAlignment="Center"
										Margin="0,0,2,0"
										Opacity="{TemplateBinding Opacity}">

				</ContentPresenter>
			</Grid>
		</Grid>

		<ControlTemplate.Triggers>

			<!-- Display AutoFilterGlyph when there are AutoFilterValues -->
			<DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
							 Value="True">


				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{x:Null}"/>

				<Setter TargetName="filterActivatedGlyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterGlyph}"/>

			</DataTrigger>

			<!-- Restore DropDownGlyph when there are no AutoFilterValues -->
			<DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
							 Value="False">

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"/>

			</DataTrigger>

		</ControlTemplate.Triggers>

	</ControlTemplate>

	<!--**************************
    * TEMPLATE: ColumnManagerCell 
    ************************** -->
	<ControlTemplate x:Key="compactCardViewColumnManagerCellTemplate"
						  TargetType="local:ColumnManagerCell">
      <ControlTemplate.Resources>
         <Style TargetType="ToggleButton">
            <Setter Property="Template"
                    Value="{StaticResource filterToggleButton}"/>
         </Style>
      </ControlTemplate.Resources>


      <Border BorderBrush="{TemplateBinding BorderBrush}"
				  BorderThickness="{TemplateBinding BorderThickness}">

			<!-- This Grid is used to layout the ContentPresenter and the Sort Glyph (when present). -->
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition />
				</Grid.ColumnDefinitions>

				<Border x:Name="toggleButtonBorder"
						  Grid.Column="0"
						  Background="Transparent"
						  Margin="0,0,0,0"
						  IsHitTestVisible="True">
					<ToggleButton x:Name="toggleButton"									  
									  TextElement.Foreground="{TemplateBinding TextElement.Foreground}"
									  Focusable="False"
									  Visibility="Hidden"
									  Margin="0,0,0,0"
									  Opacity="0.5"/>
				</Border>

				<local:AutoFilterPopup x:Name="filterOptions"
											  PopupAnimation="Slide"
											  IsOpen="{Binding ElementName=toggleButton,
                                                Path=IsChecked,
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged}"
											  StaysOpen="False"
											  AllowsTransparency="True"
											  PlacementTarget="{Binding ElementName=toggleButton}" >

					<local:AutoFilterControl x:Name="autoFilterControl"
													 Background="White"
													 BorderBrush="Black"
													 BorderThickness="1"
													 AutoFilterColumn="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:ColumnManagerCell},
                                                            Path=ParentColumn}"
													 Style="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:ColumnManagerCell}, 
                                                 Path=ParentColumn.AutoFilterControlStyle}"
                                        Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
				</local:AutoFilterPopup>

				<Grid x:Name="cellPartGrid"
						Grid.Column="1">

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition/>
					</Grid.ColumnDefinitions>

					<Border x:Name="separationLine"
							  Width="2"
							  BorderThickness="1,0,0,0"
							  Background="White"
							  Margin="0,0,0,0"
							  HorizontalAlignment="Left"
							  BorderBrush="Black"
							  Opacity="0.2"
							  Grid.Column="0"/>

					<Border x:Name="cellBorder"
							  HorizontalAlignment="Stretch"
							  Grid.Column="1"
							  Padding="{TemplateBinding Padding}"
							  Background="{TemplateBinding Background}">

						<StackPanel Orientation="Horizontal">


							<!-- Same ContentPresenter as in the base Cell Template. -->
                     <local:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                 Margin="3,0,0,0"/>

							<!-- ContentPresenter that is used to display the sort glyph.
                 We explicitely set its Content property to Null to prevent the XAML parser
                 from implicitely setting it to its TemplatedParent's Content. -->
							<ContentPresenter x:Name="sortGlyphPresenter"
													Content="{x:Null}"
													ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}"
													Margin="6,0,0,0"
													Visibility="Hidden" />

						</StackPanel>
					</Border>
				</Grid>
			</Grid>
		</Border>

		<ControlTemplate.Triggers>
			<!-- Trigger related to the filteringToggleButton-->
			<Trigger SourceName="toggleButton"
						Property="IsMouseOver"
						Value="True">

				<Setter TargetName="toggleButton"
						  Property="Opacity"
						  Value="1"/>

				<Setter TargetName="toggleButtonBorder"
						  Property="Background"
						  Value="{StaticResource groupByItemHotBackgroundBrush}" />

			</Trigger>

			<!-- Always visible if filterOptions popup IsOpen -->
			<Trigger SourceName="filterOptions"
						Property="IsOpen"
						Value="True">

				<Setter TargetName="toggleButton"
						  Property="Visibility"
						  Value="Visible"/>

				<Setter TargetName="toggleButton"
						  Property="Opacity"
						  Value="1"/>

				<Setter TargetName="toggleButtonBorder"
						  Property="Background"
						  Value="{StaticResource groupByItemHotBackgroundBrush}" />

			</Trigger>

			<!-- Display FilterToggleButton Trigger on MouseOver -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
								  Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
								  Value="True"/>

					<Condition Value="True"
								  Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}"/>

				</MultiDataTrigger.Conditions>

				<Setter TargetName="toggleButton"
						  Property="Visibility"
						  Value="Visible"/>

			</MultiDataTrigger>

			<!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->
			<MultiDataTrigger >
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
								  Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Value="True"
								  Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}"/>

					<Condition Value="True"
								  Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"/>

				</MultiDataTrigger.Conditions>

				<Setter TargetName="toggleButton"
						  Property="Visibility"
						  Value="Visible"/>

				<Setter TargetName="toggleButton"
						  Property="Opacity"
						  Value="1"/>

			</MultiDataTrigger>


			<!-- DataTrigger to disable HitTesting on filtering ToggleButton 
             when there are no DistinctValues-->
			<DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}"
							 Value="False">
				<Setter TargetName="toggleButtonBorder"
						  Property="IsHitTestVisible"
						  Value="False"/>

			</DataTrigger>

			<!-- The following 2 triggers allow to display the appropriate Sort Glyph
              depending on the ParentColumn's SortDirection. -->

			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
							 Value="Ascending">

				<Setter TargetName="sortGlyphPresenter"
						  Property="Visibility"
						  Value="Visible"/>

			</DataTrigger>

			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
							 Value="Descending">

				<Setter TargetName="sortGlyphPresenter"
						  Property="ContentPresenter.ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}"/>

				<Setter TargetName="sortGlyphPresenter"
						  Property="Visibility"
						  Value="Visible"/>

			</DataTrigger>

			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
							 Value="False">

				<Setter Property="Visibility"
						  Value="Collapsed"/>

			</DataTrigger>

			<Trigger SourceName="cellPartGrid"
						Property="IsMouseOver"
						Value="True">

				<Setter TargetName="cellBorder"
						  Property="Background"
						  Value="{StaticResource groupByItemHotBackgroundBrush}"/>

			</Trigger>

			<Trigger SourceName="toggleButton"
						Property="IsPressed"
						Value="True">

				<Setter TargetName="toggleButtonBorder"
						  Property="Background"
						  Value="{StaticResource groupByItemBackgroundBrush}" />

			</Trigger>

			<Trigger Property="IsBeingDragged"
						Value="True">

				<Setter TargetName="cellBorder"
						  Property="Background"
						  Value="{StaticResource groupByItemBackgroundBrush}"/>

				<Setter TargetName="toggleButtonBorder"
						  Property="Visibility"
						  Value="Hidden"/>

			</Trigger>

		</ControlTemplate.Triggers>

	</ControlTemplate>


	<!-- =================================================================== -->
	<!-- Styles required by some grid elements                               -->
	<!-- =================================================================== -->

	<!--**************************
    * STYLE: CellErrorStyle 
    ************************** -->
	<Style x:Key="cellErrorStyle"
			 TargetType="local:Cell">

		<Setter Property="Background"
				  Value="{StaticResource errorBackgroundBrush}"/>

		<Setter Property="Foreground"
				  Value="{StaticResource errorForegroundBrush}"/>

		<Setter Property="ToolTip"
				  Value="{Binding RelativeSource={RelativeSource Self},Path=ValidationError.ErrorContent}"/>
        
         <Style.Triggers>
            <Trigger Property="IsValidationErrorRestrictive"
                     Value="True">
                <Setter Property="Background"
                        Value="{StaticResource errorBackgroundBrush}"/>                 
                
            </Trigger>

            <Trigger Property="IsValidationErrorRestrictive"
                     Value="False">

                <Setter Property="Foreground"
                        Value="{StaticResource warningForegroundBrush}" />

                <Setter Property="Background"
                        Value="{StaticResource warningBackgroundBrush}"/>
                    
            </Trigger>
        </Style.Triggers>


	</Style>

	<!-- =================================================================== -->
	<!-- Keyed Styles of grid elements                                       -->
	<!-- =================================================================== -->

	<!--**************************
    * STYLE: DataGridControl 
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorGridControlStyle"
			 TargetType="local:DataGridControl">

		<Setter Property="BorderBrush"
				  Value="{StaticResource gridControlBorderBrush}" />

		<Setter Property="BorderThickness"
				  Value="1" />

		<Setter Property="Background"
				  Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

		<Setter Property="Foreground"
				  Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

		<!-- In CompactCardView, it is more convenient to use Row/Explicit navigation than Cell navigation. -->
		<Setter Property="NavigationBehavior"
				  Value="RowOrCell"/>

		<!-- For the horizontal scrolling of the CompactCardView, PagingBehavior.LeftToRight is better suited 
           than the default TopToBottom. -->
		<Setter Property="PagingBehavior"
				  Value="LeftToRight"/>

		<!-- This is required to display gridlines of uniform thickness -->
		<Setter Property="SnapsToDevicePixels"
				  Value="True" />

		<Setter Property="CellErrorStyle"
				  Value="{StaticResource cellErrorStyle}" />

		<Setter Property="Template"
				  Value="{StaticResource compactCardViewDataGridControlTemplate}" />

	</Style>

   <!--**************************
    * STYLE: DataGridControl (with hosted controls theming)
    ************************** -->
   <Style x:Key="compactCardViewForcedZuneNormalColorGridControlStyle"
          BasedOn="{StaticResource compactCardViewZuneNormalColorGridControlStyle}"
          TargetType="local:DataGridControl">

      <Style.Resources>
         <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
               <ResourceDictionary Source="/PresentationFramework.Classic;V3.0.0.0;31bf3856ad364e35;component\themes/classic.xaml" />
               <utils:XceedResourceDictionary XceedSource="/Xceed.Wpf.Controls;component\themes/generic.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--**************************
             * STYLE: NavigableComboBox
             ************************** -->
            <Style TargetType="{x:Type xcdp:NavigableComboBox}"
                   BasedOn="{StaticResource {x:Type ComboBox}}" />
         </ResourceDictionary>
      </Style.Resources>

   </Style>
   
	<!--**************************
    * STYLE: Row Style
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorRowStyle"
			 TargetType="local:Row">

		<Setter Property="SelectionBackground"
				  Value="{StaticResource selectionBackgroundBrush}" />

		<Setter Property="SelectionForeground"
				  Value="{StaticResource selectionForegroundBrush}" />

		<Setter Property="InactiveSelectionForeground"
				  Value="{StaticResource inactiveSelectionForegroundBrush}" />

		<Setter Property="Margin"
				  Value="5" />

		<Setter Property="BorderThickness"
				  Value="0" />

		<Setter Property="BorderBrush"
				  Value="{StaticResource compactCardBorderBrush}" />

		<!-- Set the Row's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying DataGridControl. -->
		<Setter Property="Background"
				  Value="Transparent" />

		<Setter Property="Template"
				  Value="{StaticResource compactCardViewRowTemplate}" />
	</Style>

	<!--**************************
    * STYLE: DataRow 
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorDataRowStyle"
			 TargetType="local:DataRow"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorRowStyle}" />

	<!--**************************
    * STYLE: InsertionRow 
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorInsertionRowStyle"
			 TargetType="local:InsertionRow"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorDataRowStyle}">

		<Setter Property="BorderBrush"
				  Value="{StaticResource compactCardBorderBrush}" />

		<Setter Property="BorderThickness"
				  Value="0"/>

		<Setter Property="Template"
				  Value="{StaticResource compactCardViewInsertionRowTemplate}" />

	</Style>

	<!--**************************
    * STYLE: ColumnManagerRow 
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorColumnManagerRowStyle"
			 TargetType="local:ColumnManagerRow">

		<Setter Property="Background"
				  Value="{StaticResource groupByControlBackgroundBrush}" />

		<Setter Property="BorderThickness"
				  Value="1,0,0,0"/>

		<Setter Property="BorderBrush"
				  Value="#757575"/>

		<Setter Property="Foreground"
				  Value="{StaticResource columnManagerRowForegroundBrush}" />

		<Setter Property="views:UIViewBase.DropMarkOrientation"
				  Value="Horizontal" />

		<Setter Property="Template"
				  Value="{StaticResource compactCardViewColumnManagerRowTemplate}" />

	</Style>

	<!--**************************
    * STYLE: StatRow 
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorStatRowStyle"
			 TargetType="local:StatRow"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorRowStyle}">

		<Setter Property="BorderThickness"
				  Value="1" />

		<Setter Property="Template"
				  Value="{StaticResource compactCardViewStatRowTemplate}"/>

	</Style>

   <!--**************************
    * STYLE: FilterRow 
    ************************** -->
   <Style x:Key="compactCardViewZuneNormalColorFilterRowStyle"
			 TargetType="local:FilterRow"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorRowStyle}">

      <Setter Property="Template"
				  Value="{StaticResource compactCardViewFilterRowTemplate}"/>


   </Style>

   <!--**************************
    * STYLE: Cell Style
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorCellStyle"
			 TargetType="local:Cell">

		<Setter Property="CurrentBackground"
				  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

		<Setter Property="CurrentForeground"
				  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />

		<!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
		<Setter Property="Background"
				  Value="Transparent" />

		<!-- A basic Cell Template requires at least a ContentPresenter that is used to display the Cell's Content.
           This ContentPresenter is usually placed inside a Border who is responsible for painting the gridlines. -->
		<Setter Property="Template"
				  Value="{StaticResource compactCardViewCellTemplate}" />

	</Style>

	<!--**************************
    * STYLE: DataCell
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorDataCellStyle"
			 TargetType="local:DataCell"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorCellStyle}" >

		<Style.Triggers>

			<MultiDataTrigger>

				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.IsBeingEdited}"
								  Value="False"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Content, Mode=OneWay, Converter={StaticResource nullToBooleanConverter}}"
								  Value="True"/>

				</MultiDataTrigger.Conditions>

				<Setter Property="Visibility"
						  Value="Collapsed"/>

			</MultiDataTrigger>

		</Style.Triggers>

	</Style>

	<!--**************************
    * STYLE: InsertionCell
   ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorInsertionCellStyle"
			 TargetType="local:InsertionCell"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorCellStyle}" />

	<!--**************************
    * STYLE: ColumnManagerCell 
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorColumnManagerCellStyle"
			 TargetType="local:ColumnManagerCell">
		<!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
		<Setter Property="Background"
				  Value="Transparent"/>

		<Setter Property="Padding"
				  Value="{StaticResource cellPadding}" />

		<!-- We don't use the base Cell Template for the ColumnManagerCell because it need more elements
           to function properly, like a glyph that represents the Column's SortDirection. -->
		<Setter Property="Template"
				  Value="{StaticResource compactCardViewColumnManagerCellTemplate}" />

		<Style.Triggers>

			<Trigger Property="IsPressed"
						Value="True">

				<Setter Property="Background"
						  Value="{StaticResource groupByItemBackgroundBrush}"/>

			</Trigger>
		</Style.Triggers>
	</Style>

	<!--**************************
    * STYLE: StatCell Style
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorStatCellStyle"
			 TargetType="local:StatCell">

		<!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
		<Setter Property="Background"
				  Value="Transparent" />

		<!-- A basic Cell Template requires at least a ContentPresenter, which is used to display the Cell's Content.
           This ContentPresenter is usually placed inside a Border that is responsible for painting the gridlines. -->
		<Setter Property="Template"
				  Value="{StaticResource compactCardViewStatCellTemplate}" />

		<Style.Triggers>

			<!-- Collapse the cell when HideEmptyCells is true and the StatFunction returns null. -->
			<MultiDataTrigger>

				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Content, Mode=OneWay, Converter={StaticResource nullToBooleanConverter}}"
								  Value="True"/>

				</MultiDataTrigger.Conditions>

				<Setter Property="Visibility"
						  Value="Collapsed"/>

			</MultiDataTrigger>

			<!-- Collapse the cell when HideEmptyCells is true and no StatFunction is defined for the cell. -->
			<MultiDataTrigger>

				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasContent}"
								  Value="False"/>

				</MultiDataTrigger.Conditions>

				<Setter Property="Visibility"
						  Value="Collapsed"/>

			</MultiDataTrigger>

			<!-- Hide the cell when when HideEmptyCells is false and no StatFunction is defined for the cell. -->
			<MultiDataTrigger>

				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
								  Value="False"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasContent}"
								  Value="False"/>

				</MultiDataTrigger.Conditions>

				<Setter Property="Visibility"
						  Value="Hidden"/>

			</MultiDataTrigger>

		</Style.Triggers>

	</Style>

   <!--**************************
    * STYLE: FilterCell
   ************************** -->
   <Style x:Key="compactCardViewZuneNormalColorFilterCellStyle"
			 TargetType="local:FilterCell"
          BasedOn="{StaticResource compactCardViewZuneNormalColorCellStyle}" >
      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
				  Value="Transparent" />

      <Setter Property="Template"
              Value="{StaticResource compactCardViewFilterCellTemplate}"/>
   </Style>


   <!--**************************
    * STYLE: GroupByControl 
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorGroupByControlStyle"
			 TargetType="local:GroupByControl">

		<!-- If we don't specify a MinHeight, the default "size-to-content" behavior will arrange 
           the control with a Height of 0, which makes it invisible and unusable.
           In a typical CompactCardView, a height of at least 50 is appropriate for the GroupByControl. -->
		<Setter Property="MinHeight"
				  Value="50" />

		<Setter Property="Background"
				  Value="{StaticResource groupByControlBackgroundBrush}" />

		<Setter Property="Foreground"
				  Value="{StaticResource groupByControlForegroundBrush}" />

		<Setter Property="Padding"
				  Value="8"/>

		<Setter Property="Template"
				  Value="{StaticResource compactCardViewGroupByControlTemplate}" />

	</Style>

	<!--**************************
    * STYLE: GroupByItem
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorGroupByItemStyle"
			 TargetType="local:GroupByItem">

		<Setter Property="Background"
				  Value="{StaticResource groupByItemBackgroundBrush}" />

		<Setter Property="Foreground"
				  Value="{StaticResource groupByItemForegroundBrush}" />

		<Setter Property="Padding"
				  Value="{StaticResource cellPadding}" />

		<Setter Property="BorderBrush"
				  Value="{StaticResource groupByItemBorderBrush}" />

		<Setter Property="BorderThickness"
				  Value="1" />

		<Setter Property="Template"
				  Value="{StaticResource compactCardViewGroupByItemTemplate}" />

		<Style.Triggers>
			<Trigger Property="IsMouseOver"
						Value="True">

				<Setter Property="Background"
						  Value="{StaticResource groupByItemHotBackgroundBrush}" />

			</Trigger>

			<Trigger Property="IsPressed"
						Value="True">

				<Setter Property="Background"
						  Value="{StaticResource groupByItemPressedBackgroundBrush}" />

			</Trigger>

		</Style.Triggers>

	</Style>

	<!--**************************
    * STYLE: GroupHeaderControl
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorGroupHeaderControlStyle"
			 TargetType="local:GroupHeaderControl">

		<Setter Property="Background"
				  Value="{StaticResource groupHeaderBackgroundBrush}" />

		<Setter Property="Foreground"
				  Value="{StaticResource groupHeaderForegroundBrush}" />

		<Setter Property="BorderBrush"
				  Value="{StaticResource groupHeaderBorderBrush}" />

		<Setter Property="BorderThickness"
				  Value="1" />

		<Setter Property="Margin"
				  Value="5,0,5,5" />

		<Setter Property="Padding"
				  Value="{StaticResource cellPadding}" />

		<Setter Property="VerticalContentAlignment"
				  Value="Center" />

		<!-- The GroupHeaderControl itself must not be focusable. The main Border inside its Template will
           be made Focusable because it is holding the various InputBindings that make the
           GroupHeaderControl work. -->
		<Setter Property="Focusable"
				  Value="False" />

		<Setter Property="Template"
				  Value="{StaticResource compactCardViewGroupHeaderControlTemplate}" />

		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=Content.IsBottomLevel}"
								  Value="False" />

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=Content.IsExpanded}"
								  Value="True" />

				</MultiDataTrigger.Conditions>

				<Setter Property="Visibility"
						  Value="Collapsed" />

			</MultiDataTrigger>
		</Style.Triggers>

	</Style>

	<!--**************************
    * STYLE: GroupLevelIndicator
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorGroupLevelIndicatorStyle"
			 TargetType="local:GroupLevelIndicator">

		<Setter Property="Width"
				  Value="12" />

	</Style>

	<!--**************************
    * STYLE: DetailIndicator
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorDetailIndicatorStyle"
			 TargetType="local:DetailIndicator">

		<Setter Property="Width"
				  Value="12" />

	</Style>

	<!--**************************
    * STYLE: GroupLevelIndicatorPane
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorGroupLevelIndicatorPaneStyle"
			 TargetType="local:GroupLevelIndicatorPane">

		<Setter Property="Template"
				  Value="{StaticResource compactCardViewGroupLevelIndicatorPaneTemplate}" />

	</Style>

	<!--**************************
    * STYLE: HierarchicalGroupLevelIndicatorPane
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorHierarchicalGroupLevelIndicatorPaneStyle"
          TargetType="local:HierarchicalGroupLevelIndicatorPane">

		<Setter Property="Template"
              Value="{StaticResource compactCardViewHierarchicalGroupLevelIndicatorPaneTemplate}" />

	</Style>

	<!--**************************
    * STYLE: AutoFilterControl
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorAutoFilterControlStyle"
			 TargetType="local:AutoFilterControl">

		<Setter Property="Template"
				  Value="{StaticResource compactCardViewAutoFilterControlTemplate}"/>
      <Setter Property="DistinctValueItemContainerStyle"
              Value="{StaticResource defaultAutoFilteringCheckBoxItemStyle}" />
   </Style>

   <!--**************************
    * STYLE: MenuItem (for the ColumnChooserContextMenu)
    ************************** -->
   <Style x:Key="compactCardViewZuneNormalColorColumnChooserContextMenuMenuItemStyle"
          TargetType="{x:Type MenuItem}">
      <Setter Property="IsCheckable"
              Value="True" />
      <Setter Property="IsChecked"
              Value="{Binding Path=Visible}" />
      <Setter Property="StaysOpenOnClick"
              Value="True" />
   </Style>
   
   <!--**************************
    * STYLE: ColumnChooserContextMenu
    ************************** -->
   <Style x:Key="compactCardViewZuneNormalColorColumnChooserContextMenuStyle"
          TargetType="{x:Type local:ColumnChooserContextMenu}"
          BasedOn="{StaticResource {x:Type ContextMenu}}">
      <Setter Property="ItemContainerStyle"
              Value="{StaticResource compactCardViewZuneNormalColorColumnChooserContextMenuMenuItemStyle}" />
      <Setter Property="DisplayMemberPath"
              Value="Title" />
      <Setter Property="SortOrder"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ColumnChooserSortOrder}" />
   </Style>

   <!--**************************
    * STYLE: ScrollTip
    ************************** -->
	<Style x:Key="compactCardViewZuneNormalColorScrollTipStyle"
			 TargetType="local:ScrollTip">

		<Setter Property="Template"
				  Value="{StaticResource scrollTipTemplate}"/>

		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0.5,1"
											EndPoint="0.5,0">
					<GradientStop Color="#FF474747"
									  Offset="0" />

					<GradientStop Color="#FF7D7D7D"
									  Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>

		<Setter Property="BorderBrush">
			<Setter.Value>
				<LinearGradientBrush EndPoint="0.5,0"
											StartPoint="0.5,1">
					<GradientStop Color="#FF000000"
									  Offset="0"/>

					<GradientStop Color="#FF333333"
									  Offset="1"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>

		<Setter Property="TextElement.Foreground"
				  Value="White"/>

		<Setter Property="VerticalAlignment"
				  Value="Bottom"/>

		<Setter Property="HorizontalAlignment"
				  Value="Center"/>

	</Style>

   <!-- =================================================================== -->
	<!-- Default values for the View                                         -->
	<!-- =================================================================== -->

	<Style x:Key="compactCardViewZuneNormalColorDefaultValues"
			 TargetType="views:CompactCardView">

		<Setter Property="DefaultDropMarkPen"
				  Value="{StaticResource dropMarkPen}" />

		<Setter Property="SeparatorLinePen"
				  Value="{StaticResource cardSeparatorLinePen}" />

		<Setter Property="CardTitleBackground"
				  Value="{StaticResource compactCardTitleBackgroundBrush}" />

		<Setter Property="CardTitleForeground"
				  Value="{StaticResource compactCardTitleForegroundBrush}" />

		<Setter Property="AutoFilterDropDownGlyph"
				  Value="{StaticResource autoFilterDropDownGlyph}"/>

		<Setter Property="AutoFilterGlyph"
				  Value="{StaticResource autoFilterGlyph}"/>

		<!-- Those glyphs are null by default on ViewBase, so every Theme should define
           and set their own custom glyphs. -->

		<Setter Property="AscendingSortGlyph"
				  Value="{StaticResource ascendingSortGlyph}" />

		<Setter Property="DescendingSortGlyph"
				  Value="{StaticResource descendingSortGlyph}" />

		<Setter Property="ExpandGroupGlyph"
				  Value="{StaticResource expandGroupGlyph}" />

		<Setter Property="CollapseGroupGlyph"
				  Value="{StaticResource collapseGroupGlyph}" />

		<Setter Property="CurrentItemGlyph"
				  Value="{StaticResource currentItemGlyph}" />

		<Setter Property="EditingRowGlyph"
				  Value="{StaticResource editingRowGlyph}" />

		<Setter Property="ValidationErrorGlyph"
				  Value="{StaticResource validationErrorGlyph}" />

		<Setter Property="InsertionRowGlyph"
				  Value="{StaticResource insertionRowGlyph}" />

      <Setter Property="FilterRowGlyph"
				  Value="{StaticResource filterRowGlyph}" />

      <Setter Property="ClearFilterButtonGlyph"
              Value="{StaticResource clearFilterButtonGlyph}" />

      <Setter Property="ConnectionStateLoadingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}"/>

      <Setter Property="ConnectionStateCommittingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}"/>

      <Setter Property="ConnectionStateErrorGlyph"
              Value="{StaticResource connectionStateErrorGlyph}"/>

   </Style>


	<!-- =================================================================== -->
	<!-- DefaultStyleKey declarations                                        -->
	<!-- =================================================================== -->

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme}"
			 TargetType="views:CompactCardView"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorDefaultValues}" />

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:DataGridControl}"
			 TargetType="local:DataGridControl"
			 BasedOn="{StaticResource compactCardViewForcedZuneNormalColorGridControlStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:Row}"
			 TargetType="local:Row"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorRowStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:DataRow}"
			 TargetType="local:DataRow"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorDataRowStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:InsertionRow}"
			 TargetType="local:InsertionRow"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorInsertionRowStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:ColumnManagerRow}"
			 TargetType="local:ColumnManagerRow"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorColumnManagerRowStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:StatRow}"
			 TargetType="local:StatRow"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorStatRowStyle}"/>
   
   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:FilterRow}"
			 TargetType="local:FilterRow"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorFilterRowStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:Cell}"
			 TargetType="local:Cell"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorCellStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:DataCell}"
			 TargetType="local:DataCell"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorDataCellStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:InsertionCell}"
			 TargetType="local:InsertionCell"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorInsertionCellStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:ColumnManagerCell}"
			 TargetType="local:ColumnManagerCell"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorColumnManagerCellStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:StatCell}"
			 TargetType="local:StatCell"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorStatCellStyle}"/>
   
   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:FilterCell}"
			 TargetType="local:FilterCell"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorFilterCellStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:GroupByControl}"
			 TargetType="local:GroupByControl"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorGroupByControlStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:GroupByItem}"
			 TargetType="local:GroupByItem"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorGroupByItemStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:GroupHeaderControl}"
			 TargetType="local:GroupHeaderControl"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorGroupHeaderControlStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:GroupLevelIndicator}"
			 TargetType="local:GroupLevelIndicator"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorGroupLevelIndicatorStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:DetailIndicator}"
         TargetType="local:DetailIndicator"
         BasedOn="{StaticResource compactCardViewZuneNormalColorDetailIndicatorStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:GroupLevelIndicatorPane}"
			 TargetType="local:GroupLevelIndicatorPane"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorGroupLevelIndicatorPaneStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:HierarchicalGroupLevelIndicatorPane}"
          TargetType="local:HierarchicalGroupLevelIndicatorPane"
          BasedOn="{StaticResource compactCardViewZuneNormalColorHierarchicalGroupLevelIndicatorPaneStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:AutoFilterControl}"
			 TargetType="local:AutoFilterControl"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorAutoFilterControlStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:ScrollTip}"
			 TargetType="local:ScrollTip"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorScrollTipStyle}"/>

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CompactCardView, ThemeType=views:ZuneNormalColorTheme, TargetElementType=local:ColumnChooserContextMenu}"
			 TargetType="local:ColumnChooserContextMenu"
			 BasedOn="{StaticResource compactCardViewZuneNormalColorColumnChooserContextMenuStyle}"/>
</ResourceDictionary>
