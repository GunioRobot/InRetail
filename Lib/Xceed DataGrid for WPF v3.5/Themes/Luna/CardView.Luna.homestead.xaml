<!-- =======================================================================
  Xceed DataGrid for WPF - CUSTOMIZATION CODE - Default Styles and Templates
  Copyright (c) 2007-2009 Xceed Software Inc.

  [CardView.Luna.homestead.xaml]

  This file is part of the Xceed DataGrid for WPF product. The use and
  distribution of this Customization Code is subject to the terms
  and conditions refering to "Customization Code" that are specified in
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
======================================================================= -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xcdp="clr-namespace:Xceed.Wpf.Controls;assembly=Xceed.Wpf.Controls"
                    xmlns:local="clr-namespace:Xceed.Wpf.DataGrid"
                    xmlns:conv="clr-namespace:Xceed.Wpf.DataGrid.Converters"
                    xmlns:markup="clr-namespace:Xceed.Wpf.DataGrid.Markup"
                    xmlns:views="clr-namespace:Xceed.Wpf.DataGrid.Views"
                    xmlns:utils="clr-namespace:Xceed.Utils.Wpf.Markup">

	<ResourceDictionary.MergedDictionaries>

		<!-- Include the view independant, color-scheme independant, theme resources -->
		<ResourceDictionary Source="Resources/Luna.Resources.xaml" />

		<!-- Include the view dependant, color-scheme independant, theme graphics -->
		<ResourceDictionary Source="Resources/CardView.Luna.Graphics.xaml" />

		<!-- Include the view independant, color-scheme dependant, theme resources -->
		<ResourceDictionary Source="Resources/Luna.homestead.Resources.xaml" />

		<!-- Include the standard grid element templates -->
		<ResourceDictionary Source="../Common/CardView.GridElementTemplates.xaml" />

	</ResourceDictionary.MergedDictionaries>

	<!-- =================================================================== -->
	<!-- Resources specific to this View/Theme/ColorScheme                   -->
	<!-- =================================================================== -->

	<LinearGradientBrush x:Key="selectionBackgroundBrush"
								StartPoint="0.5,1"
								EndPoint="0.5,0">

		<GradientStop Offset="0"
						  Color="#AFBC84" />

		<GradientStop Offset="1"
						  Color="#C2CD95" />

	</LinearGradientBrush>

	<SolidColorBrush x:Key="selectionForegroundBrush"
						  Color="#3D471F" />

	<LinearGradientBrush x:Key="inactiveSelectionBackgroundBrush"
								StartPoint="0,1"
								EndPoint="0,0">

		<GradientStop	Offset="0"
						  Color="#898f75"	/>

		<GradientStop	Offset="1"
						  Color="#a2a78f"	/>

	</LinearGradientBrush>

	<SolidColorBrush x:Key="inactiveSelectionForegroundBrush"
						  Color="#3D471F" />

	<SolidColorBrush x:Key="cardBorderBrush"
						  Color="#849072" />

	<SolidColorBrush x:Key="groupHeaderBackgroundBrush"
						  Color="#B9C285" />

	<SolidColorBrush x:Key="groupHeaderForegroundBrush"
						  Color="#56662D" />

	<SolidColorBrush x:Key="groupHeaderBorderBrush"
						  Color="White" />

    <SolidColorBrush x:Key="warningBackgroundBrush"
                     Color="#FFC400" />

    <SolidColorBrush x:Key="warningForegroundBrush"
                     Color="Black" />

    <LinearGradientBrush x:Key="cardTitleBackgroundBrush"
								StartPoint="0.5,1"
								EndPoint="0.5,0">

		<GradientStop Offset="0"
						  Color="#C5CBAA" />

		<GradientStop Offset="1"
						  Color="#E9EDD2" />

	</LinearGradientBrush>

	<SolidColorBrush x:Key="cardTitleForegroundBrush"
						  Color="#56662D" />

	<LinearGradientBrush x:Key="cardTitleErrorBackgroundBrush"
								StartPoint="0.5,1"
								EndPoint="0.5,0">

		<GradientStop Offset="0"
						  Color="#990000" />

		<GradientStop Offset="0.9"
						  Color="#FD0000" />

		<GradientStop Offset="1"
						  Color="#FF0000" />

	</LinearGradientBrush>

	<SolidColorBrush x:Key="cardTitleErrorForegroundBrush"
						  Color="White" />

	<SolidColorBrush x:Key="groupByItemBorderBrush"
						  Color="#666666" />

	<LinearGradientBrush x:Key="groupByItemBackgroundBrush"
								StartPoint="0.475,1"
								EndPoint="0.475,0.117">

		<GradientStop Offset="0"
						  Color="#8C9F5C"/>

		<GradientStop Offset="0.139"
						  Color="#A3B373"/>

		<GradientStop Offset="0.822"
						  Color="#6C7A47"/>

		<GradientStop Offset="0.933"
						  Color="#899B5A"/>

		<GradientStop Offset="0.944"
						  Color="#8C9F5C"/>

	</LinearGradientBrush>

	<SolidColorBrush x:Key="groupByItemForegroundBrush"
						  Color="Black" />

	<LinearGradientBrush x:Key="groupByItemHotBackgroundBrush"
								StartPoint="0.475,1"
								EndPoint="0.475,0.058">

		<GradientStop Offset="0"
						  Color="#8C9F5C"/>

		<GradientStop Offset="0.172"
						  Color="#BBC78B"/>

		<GradientStop Offset="0.856"
						  Color="#9FAE75" />

		<GradientStop Offset="0.967"
						  Color="#DFEABA"/>

		<GradientStop Offset="0.978"
						  Color="#E6F0C1"/>

	</LinearGradientBrush>

	<LinearGradientBrush x:Key="groupByItemPressedBackgroundBrush"
								StartPoint="0.475,0"
								EndPoint="0.475,0.882">

		<GradientStop Offset="0"
						  Color="#8C9F5C"/>

		<GradientStop Offset="0.172"
						  Color="#BBC78B" />

		<GradientStop Offset="0.855"
						  Color="#9FAE75"/>

		<GradientStop Offset="0.966"
						  Color="#DFEABA"/>

		<GradientStop Offset="0.977"
						  Color="#E6F0C1"/>

	</LinearGradientBrush>

	<DataTemplate x:Key="insertionRowGlyph">
		<Canvas
		  Height="29"
		  Width="41"
		  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
			<Path
			  Canvas.Left="9"
			  Canvas.Top="7"
			  Height="22"
			  Width="32"
			  Stretch="Fill"
			  Opacity="0.5803921568627451"
			  Data="M 9,7 C9,7 41,7 41,7 41,7 41,29 41,29 41,29 9,29 9,29 9,29 9,7 9,7 z">
				<Path.Fill>
					<LinearGradientBrush
					  StartPoint="0,0.5"
					  EndPoint="1,0.5">
						<LinearGradientBrush.GradientStops>
							<GradientStopCollection>
								<GradientStop
								  Color="#FF333333"
								  Offset="0" />
								<GradientStop
								  Color="#FF999999"
								  Offset="0.9944444298744202" />
							</GradientStopCollection>
						</LinearGradientBrush.GradientStops>
					</LinearGradientBrush>
				</Path.Fill>
			</Path>
			<Grid
			  Width="38.371177077293396"
			  Height="25.935275554656982"
			  Opacity="1"
			  Canvas.Left="0.9921079874038696"
			  Canvas.Top="1.4380249977111816">
				<Grid
				  Width="31.999695777893066"
				  Height="21.642513751983643"
				  Opacity="1"
				  Margin="6.37148129940033,4.29276180267334,0,0"
				  HorizontalAlignment="Left"
				  VerticalAlignment="Top">
					<Path
					  Margin="0.1440143585205078,0.3072199821472168,0,0"
					  HorizontalAlignment="Left"
					  VerticalAlignment="Top"
					  Height="21.335293769836426"
					  Width="31.79249858856201"
					  Stretch="Fill"
					  Opacity="1"
					  Data="M 0.1440143585205078,0.3072199821472168 C0.1440143585205078,0.3072199821472168 31.93651294708252,0.7175140380859375 31.93651294708252,0.7175140380859375 31.93651294708252,0.7175140380859375 31.734013557434082,21.642513751983643 31.734013557434082,21.642513751983643 31.734013557434082,21.642513751983643 0.1440143585205078,21.642513751983643 0.1440143585205078,21.642513751983643 0.1440143585205078,21.642513751983643 0.1440143585205078,0.3072199821472168 0.1440143585205078,0.3072199821472168 z">
						<Path.Fill>
							<RadialGradientBrush
							  Center="0.9467851357646228,0.932715728016277"
							  GradientOrigin="0.9467851357646228,0.932715728016277"
							  RadiusX="0.8519521294316995"
							  RadiusY="1.4495842057483923">
								<RadialGradientBrush.GradientStops>
									<GradientStopCollection>
										<GradientStop
										  Color="#FFffffff"
										  Offset="0" />
										<GradientStop
										  Color="#FFE6EBCF"
										  Offset="0.9611110091209412" />
										<GradientStop
										  Color="#FFe6ebcf"
										  Offset="0.9722219705581665" />
									</GradientStopCollection>
								</RadialGradientBrush.GradientStops>
							</RadialGradientBrush>
						</Path.Fill>
					</Path>
					<Path
					  Margin="2.4727649688720703,9.436262607574463,0,0"
					  HorizontalAlignment="Left"
					  VerticalAlignment="Top"
					  Height="1"
					  Width="27.134997367858887"
					  Stretch="Fill"
					  Opacity="1"
					  Data="M 2.4727649688720703,9.436262607574463 C2.4727649688720703,9.436262607574463 29.607762336730957,9.436262607574463 29.607762336730957,9.436262607574463 "
					  Stroke="#cccccc"
					  StrokeThickness="1" />
					<Path
					  Margin="2.4727649688720703,13.539204120635986,0,0"
					  HorizontalAlignment="Left"
					  VerticalAlignment="Top"
					  Height="1"
					  Width="27.134997367858887"
					  Stretch="Fill"
					  Opacity="1"
					  Data="M 2.4727649688720703,13.539204120635986 C2.4727649688720703,13.539204120635986 29.607762336730957,13.539204120635986 29.607762336730957,13.539204120635986 "
					  Stroke="#cccccc"
					  StrokeThickness="1" />
					<Path
					  Margin="2.4727649688720703,17.43699884414673,0,0"
					  HorizontalAlignment="Left"
					  VerticalAlignment="Top"
					  Height="1"
					  Width="27.134997367858887"
					  Stretch="Fill"
					  Opacity="1"
					  Data="M 2.4727649688720703,17.43699884414673 C2.4727649688720703,17.43699884414673 29.607762336730957,17.43699884414673 29.607762336730957,17.43699884414673 "
					  Stroke="#cccccc"
					  StrokeThickness="1" />
					<Path
					  Margin="0,0,0,0"
					  HorizontalAlignment="Left"
					  VerticalAlignment="Top"
					  Height="5.435896396636963"
					  Width="31.999695777893066"
					  Stretch="Fill"
					  Opacity="1"
					  Data="M 0,5.435896396636963 C0,5.435896396636963 0.1440143585205078,0.10207319259643555 0.1440143585205078,0.10207319259643555 0.1440143585205078,0.10207319259643555 31.96593189239502,0 31.96593189239502,0 31.96593189239502,0 31.999695777893066,5.1628851890563965 31.999695777893066,5.1628851890563965 31.999695777893066,5.1628851890563965 0,5.435896396636963 0,5.435896396636963 z"
					  Stroke="#859072"
					  StrokeThickness="1">
						<Path.Fill>
							<LinearGradientBrush
							  StartPoint="0.5170834645517227,1"
							  EndPoint="0.5170834645517227,-0.1321798320880155">
								<LinearGradientBrush.GradientStops>
									<GradientStopCollection>
										<GradientStop
										  Color="#FFb2bf87"
										  Offset="0" />
										<GradientStop
										  Color="#FFdde1c4"
										  Offset="0.9833329916000366" />
									</GradientStopCollection>
								</LinearGradientBrush.GradientStops>
							</LinearGradientBrush>
						</Path.Fill>
					</Path>
				</Grid>
				<Grid
				  Width="15.048451781272888"
				  Height="15.280250072479248"
				  Opacity="1"
				  Margin="0,0,0,0"
				  HorizontalAlignment="Left"
				  VerticalAlignment="Top">
					<Path
					  Margin="0,0,0,0"
					  HorizontalAlignment="Left"
					  VerticalAlignment="Top"
					  Height="15.280250072479248"
					  Width="15.048451781272888"
					  Stretch="Fill"
					  Opacity="1"
					  Data="M 9.310377478599548,0 C9.310377478599548,0 9.789016127586365,4.447423934936523 9.789016127586365,4.447423934936523 9.789016127586365,4.447423934936523 13.964786887168884,4.092772960662842 13.964786887168884,4.092772960662842 13.964786887168884,4.092772960662842 11.34173047542572,6.99082612991333 11.34173047542572,6.99082612991333 11.34173047542572,6.99082612991333 15.048451781272888,9.399150371551514 15.048451781272888,9.399150371551514 15.048451781272888,9.399150371551514 10.658192992210388,9.91457223892212 10.658192992210388,9.91457223892212 10.658192992210388,9.91457223892212 11.122618079185486,13.534395694732666 11.122618079185486,13.534395694732666 11.122618079185486,13.534395694732666 8.138833403587341,11.505964756011963 8.138833403587341,11.505964756011963 8.138833403587341,11.505964756011963 5.738076090812683,15.280250072479248 5.738076090812683,15.280250072479248 5.738076090812683,15.280250072479248 5.2594369649887085,10.832826137542725 5.2594369649887085,10.832826137542725 5.2594369649887085,10.832826137542725 1.6856290102005005,11.32816457748413 1.6856290102005005,11.32816457748413 1.6856290102005005,11.32816457748413 3.7067230939865112,8.28942346572876 3.7067230939865112,8.28942346572876 3.7067230939865112,8.28942346572876 0,5.881048679351807 0,5.881048679351807 0,5.881048679351807 4.390260100364685,5.3656768798828125 4.390260100364685,5.3656768798828125 4.390260100364685,5.3656768798828125 3.9258350133895874,1.745802879333496 3.9258350133895874,1.745802879333496 3.9258350133895874,1.745802879333496 6.909619688987732,3.7742347717285156 6.909619688987732,3.7742347717285156 6.909619688987732,3.7742347717285156 9.310377478599548,0 9.310377478599548,0 z"
					  Stroke="#ff9900"
					  StrokeThickness="1">
						<Path.Fill>
							<RadialGradientBrush
							  Center="0.7067652956084967,0.6952551141586581"
							  GradientOrigin="0.7067652956084967,0.6952551141586581"
							  RadiusX="0.7427324241277523"
							  RadiusY="1.4000535442196342">
								<RadialGradientBrush.GradientStops>
									<GradientStopCollection>
										<GradientStop
										  Color="#FFffff00"
										  Offset="0" />
										<GradientStop
										  Color="#FFffcc00"
										  Offset="0.48888900876045227" />
										<GradientStop
										  Color="#FFff9900"
										  Offset="0.9777780175209045" />
									</GradientStopCollection>
								</RadialGradientBrush.GradientStops>
							</RadialGradientBrush>
						</Path.Fill>
					</Path>
					<Path
					  Margin="0.4514709711074829,0.47901010513305664,0,0"
					  HorizontalAlignment="Left"
					  VerticalAlignment="Top"
					  Height="11.231339454650879"
					  Width="13.485407590866089"
					  Stretch="Fill"
					  Opacity="1"
					  Data="M 1.1099179983139038,11.69368314743042 C1.9093140363693237,11.121764659881592 3.8831452131271362,8.27955675125122 3.8831452131271362,8.27955675125122 3.8831452131271362,8.27955675125122 0.4514709711074829,5.986578464508057 0.4514709711074829,5.986578464508057 0.4514709711074829,5.986578464508057 4.402446150779724,5.379350185394287 4.402446150779724,5.379350185394287 4.402446150779724,5.379350185394287 4.0575631856918335,2.1025071144104004 4.0575631856918335,2.1025071144104004 4.0575631856918335,2.1025071144104004 6.90922486782074,3.991201877593994 6.90922486782074,3.991201877593994 6.90922486782074,3.991201877593994 9.119049429893494,0.47901010513305664 9.119049429893494,0.47901010513305664 9.119049429893494,0.47901010513305664 9.795244574546814,4.545039176940918 9.795244574546814,4.545039176940918 9.795244574546814,4.545039176940918 13.936878561973572,4.197250843048096 13.936878561973572,4.197250843048096 13.936878561973572,4.197250843048096 11.873884558677673,5.8367743492126465 11.873884558677673,5.8367743492126465 11.873884558677673,5.8367743492126465 10.82979428768158,5.691528797149658 7.953439116477966,6.652703762054443 3.959452986717224,7.9873127937316895 0.6810640096664429,12.000451564788818 1.1099179983139038,11.69368314743042 z">
						<Path.Fill>
							<RadialGradientBrush
							  Center="0.48955447906726046,0.5642400517011547"
							  GradientOrigin="0.48955447906726046,0.5642400517011547"
							  RadiusX="0.184710630988437"
							  RadiusY="1.4564940578747219">
								<RadialGradientBrush.GradientStops>
									<GradientStopCollection>
										<GradientStop
										  Color="#3affffff"
										  Offset="0" />
										<GradientStop
										  Color="#7Dffffff"
										  Offset="0.9555559754371643" />
										<GradientStop
										  Color="#7fffffff"
										  Offset="0.9777780175209045" />
									</GradientStopCollection>
								</RadialGradientBrush.GradientStops>
							</RadialGradientBrush>
						</Path.Fill>
					</Path>
					<Path
					  Margin="0.9951024055480957,0.6253013610839844,0,0"
					  HorizontalAlignment="Left"
					  VerticalAlignment="Top"
					  Height="13.50903844833374"
					  Width="13.023992419242859"
					  Stretch="Fill"
					  Opacity="1"
					  Data="M 9.035374999046326,1.2233688831329346 C9.366884589195251,1.300900936126709 9.343921065330505,4.907051086425781 9.54839837551117,5.091712951660156 9.752875685691833,5.2763261795043945 12.606093764305115,4.618612766265869 12.641689658164978,4.928536891937256 12.677261710166931,5.238461971282959 10.847097754478455,6.324549198150635 10.654584288597107,6.639532566070557 10.46207082271576,6.954566478729248 13.401655554771423,8.827784061431885 13.092148184776306,8.941826343536377 12.964943289756775,8.988706111907959 9.841346144676208,9.269581317901611 9.841346144676208,9.269581317901611 9.841346144676208,9.269581317901611 10.287429213523865,12.113542079925537 10.287429213523865,12.113542079925537 10.287429213523865,12.113542079925537 8.016893744468689,10.454636096954346 8.016893744468689,10.454636096954346 8.016893744468689,10.454636096954346 6.168437361717224,13.368966579437256 6.10935914516449,13.352638721466064 6.040219664573669,13.333457469940186 5.7615097761154175,10.08851671218872 5.7615097761154175,10.08851671218872 5.7615097761154175,10.08851671218872 3.2771772146224976,10.192593097686768 3.2771772146224976,10.192593097686768 3.2771772146224976,10.192593097686768 4.73378312587738,8.035244464874268 4.73378312587738,8.035244464874268 4.73378312587738,8.035244464874268 1.943302035331726,6.369776248931885 1.8523849248886108,6.273863315582275 1.625486969947815,6.034408092498779 4.987080931663513,5.813684940338135 4.99548614025116,5.558252811431885 5.003865122795105,5.302871227264404 4.618492007255554,3.314157009124756 4.787818789482117,3.05206298828125 4.957095980644226,2.7901201248168945 6.659337401390076,4.614457130432129 6.961455702781677,4.446621894836426 7.263598799705505,4.278838157653809 8.70384156703949,1.145888090133667 9.035374999046326,1.2233688831329346 zM 9.174791693687439,0.6269609928131104 C8.807464003562927,0.541064977645874 7.122205138206482,3.817108154296875 6.787432074546814,4.003022193908691 6.452635169029236,4.189036846160889 4.2995651960372925,1.9188461303710938 4.111970782279968,2.2091870307922363 3.924375891685486,2.499527931213379 4.644545912742615,4.949223041534424 4.635203242301941,5.232301235198975 4.625933051109314,5.515279769897461 0.7554439306259155,5.891416072845459 1.0068389177322388,6.1567158699035645 1.1096709966659546,6.265248775482178 4.1628178358078,7.972086429595947 4.067427039146423,8.0003342628479 4.036280989646912,8.009499073028564 2.356979250907898,10.904146671295166 2.356979250907898,10.904146671295166 2.356979250907898,10.904146671295166 5.37312114238739,10.561718463897705 5.37312114238739,10.561718463897705 5.37312114238739,10.561718463897705 5.9218138456344604,14.1108717918396 6.00598418712616,14.13426160812378 6.069239974021912,14.15169095993042 8.11052930355072,11.242018222808838 8.11052930355072,11.242018222808838 8.11052930355072,11.242018222808838 10.690995573997498,12.933080196380615 10.690995573997498,12.933080196380615 10.690995573997498,12.933080196380615 10.343146681785583,9.668957233428955 10.343146681785583,9.668957233428955 10.343146681785583,9.668957233428955 13.846479773521423,9.20762586593628 13.995067954063416,9.152884006500244 14.338021636009216,9.026569843292236 10.89270532131195,7.094101428985596 11.106055617332458,6.745110034942627 11.319359183311462,6.395969867706299 13.492278456687927,4.857266902923584 13.45285165309906,4.513835906982422 13.413448691368103,4.170454978942871 9.955475211143494,4.693789958953857 9.728923201560974,4.48929500579834 9.502321600914001,4.284698009490967 9.542144179344177,0.712805986404419 9.174791693687439,0.6269609928131104 z">
						<Path.Fill>
							<LinearGradientBrush
							  StartPoint="0.6306783491228223,-0.03166897083769098"
							  EndPoint="0.36632621368312374,1.0584688442038823">
								<LinearGradientBrush.GradientStops>
									<GradientStopCollection>
										<GradientStop
										  Color="#99ffffff"
										  Offset="0" />
										<GradientStop
										  Color="#00ffffff"
										  Offset="0.9833329916000366" />
									</GradientStopCollection>
								</LinearGradientBrush.GradientStops>
							</LinearGradientBrush>
						</Path.Fill>
					</Path>
				</Grid>
			</Grid>

			<Canvas.RenderTransform>
				<TranslateTransform X="-6"
										  Y="-12" />
			</Canvas.RenderTransform>
		</Canvas>
	</DataTemplate>

	<!-- =================================================================== -->
	<!-- Templates specific to this View/Theme/ColorScheme                   -->
	<!-- =================================================================== -->

   <!--**************************
    * TEMPLATE: Row 
    ************************** -->
	<ControlTemplate x:Key="cardViewRowTemplate"
						  TargetType="local:Row">

		<Grid>

			<Border x:Name="rootBorder"
					  Background="{TemplateBinding Background}"
					  BorderBrush="{TemplateBinding BorderBrush}"
					  BorderThickness="{TemplateBinding BorderThickness}"
					  Padding="{TemplateBinding Padding}">

				<!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
				<DockPanel>

					<!-- Border that contains the Title of the Card. -->
					<Border x:Name="cardTitleBorder"
							  DockPanel.Dock="Top"
							  BorderBrush="{TemplateBinding BorderBrush}"
							  BorderThickness="0,0,0,1"
							  Padding="3,1,3,3"
							  Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
							  TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
							  TextElement.FontWeight="Bold">


						<!-- ContentPresenter in charge of displaying the Card Title. -->
						<ContentPresenter x:Name="cardTitlePresenter"
												Content="{Binding}"
												ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleTemplate}"
												MinHeight="15"
												HorizontalAlignment="Left"
												VerticalAlignment="Center" />

					</Border>

					<!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
					<StackPanel x:Name="PART_CellsHost"
									Orientation="Vertical"
									Margin="3"
									Grid.IsSharedSizeScope="True" />

				</DockPanel>
			</Border>

			<!-- ContentPresenter in charge of displaying the glyph that represents
              the state of the row (like IsBeingEdited) -->
			<ContentPresenter x:Name="glyphPresenter"
									Content="{x:Null}"
									ContentTemplate="{x:Null}"
									HorizontalAlignment="Right"
									VerticalAlignment="Top" />
		</Grid>

		<ControlTemplate.Triggers>

			<!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="True"/>

				</MultiDataTrigger.Conditions>

				<Setter TargetName="cardTitleBorder"
						  Property="Background"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

				<Setter TargetName="cardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />

			</MultiDataTrigger>

			<!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="False"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=HideSelection}"
								  Value="False" />

				</MultiDataTrigger.Conditions>

				<Setter TargetName="cardTitleBorder"
						  Property="Background"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionBackground}" />

				<Setter TargetName="cardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

			</MultiDataTrigger>

			<MultiTrigger>
				<MultiTrigger.Conditions>

					<Condition Property="IsCurrent"
								  Value="True" />

					<Condition Property="IsBeingEdited"
								  Value="False" />

				</MultiTrigger.Conditions>

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CurrentItemGlyph}" />

			</MultiTrigger>

			<Trigger Property="IsBeingEdited"
						Value="True">

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).EditingRowGlyph}" />

			</Trigger>

			<Trigger Property="HasValidationError"
						Value="True">

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ValidationErrorGlyph}" />

				<Setter TargetName="cardTitleBorder"
						  Property="Background"
						  Value="{StaticResource cardTitleErrorBackgroundBrush}" />

				<Setter TargetName="cardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{StaticResource cardTitleErrorForegroundBrush}" />

			</Trigger>

		</ControlTemplate.Triggers>

	</ControlTemplate>

	<!--**************************
    * TEMPLATE: InsertionRow 
    ************************** -->
	<ControlTemplate x:Key="cardViewInsertionRowTemplate"
						  TargetType="local:InsertionRow">

		<Grid>

			<Border x:Name="rootBorder"
					  Background="{TemplateBinding Background}"
					  BorderBrush="{TemplateBinding BorderBrush}"
					  BorderThickness="{TemplateBinding BorderThickness}"
					  Padding="{TemplateBinding Padding}">

				<!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
				<DockPanel x:Name="PART_RowFocusRoot">

					<!-- Border that contains the Title of the Card. -->
					<Border x:Name="cardTitleBorder"
							  DockPanel.Dock="Top"
							  BorderBrush="{TemplateBinding BorderBrush}"
							  BorderThickness="0,0,0,1"
							  Padding="3,1,3,3"
							  Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
							  TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
							  TextElement.FontWeight="Bold">

						<!-- ContentPresenter in charge of displaying the Card Title. -->
						<ContentPresenter x:Name="cardTitlePresenter"
												ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).InsertionCardTitleTemplate}"
												MinHeight="15"
												HorizontalAlignment="Left"
												VerticalAlignment="Center" />

					</Border>

					<!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
					<StackPanel x:Name="PART_CellsHost"
									Orientation="Vertical"
									Visibility="Collapsed"
									Margin="3"
									Grid.IsSharedSizeScope="True" />

				</DockPanel>
			</Border>

			<!-- ContentPresenter in charge of displaying the glyph that represents
              the state of the row (like IsBeingEdited) -->
			<ContentPresenter x:Name="glyphPresenter"
									Content="{x:Null}"
									ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).InsertionRowGlyph}"
									HorizontalAlignment="Right"
									VerticalAlignment="Top" />
		</Grid>

		<ControlTemplate.Triggers>

			<!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="True"/>

				</MultiDataTrigger.Conditions>

				<Setter TargetName="cardTitleBorder"
						  Property="Background"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

				<Setter TargetName="cardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />

			</MultiDataTrigger>

			<!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="False"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=HideSelection}"
								  Value="False" />

				</MultiDataTrigger.Conditions>

				<Setter TargetName="cardTitleBorder"
						  Property="Background"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionBackground}" />

				<Setter TargetName="cardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

			</MultiDataTrigger>

			<Trigger Property="IsCurrent"
						Value="True">

				<Setter TargetName="PART_CellsHost"
						  Property="Visibility"
						  Value="Visible" />

				<Setter TargetName="cardTitleBorder"
						  Property="KeyboardNavigation.IsTabStop"
						  Value="False"/>

			</Trigger>

			<MultiTrigger>
				<MultiTrigger.Conditions>

					<Condition Property="IsCurrent"
								  Value="True" />

					<Condition Property="IsBeingEdited"
								  Value="False" />

				</MultiTrigger.Conditions>

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CurrentItemGlyph}" />

			</MultiTrigger>

			<Trigger Property="IsBeingEdited"
						Value="True">

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).EditingRowGlyph}" />

				<Setter TargetName="PART_CellsHost"
						  Property="Visibility"
						  Value="Visible" />

			</Trigger>

			<Trigger Property="HasValidationError"
						Value="True">

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ValidationErrorGlyph}" />

				<Setter TargetName="cardTitleBorder"
						  Property="Background"
						  Value="{StaticResource cardTitleErrorBackgroundBrush}" />

				<Setter TargetName="cardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{StaticResource cardTitleErrorForegroundBrush}" />

			</Trigger>

			<Trigger Property="NavigationBehavior"
						Value="CellOnly">

				<Setter TargetName="cardTitleBorder"
						  Property="Focusable"
                    
						  Value="True"/>
			</Trigger>

		</ControlTemplate.Triggers>

	</ControlTemplate>

   <!--**************************
    * TEMPLATE: FilterRow 
    ************************** -->
   <ControlTemplate x:Key="cardViewFilterRowTemplate"
						  TargetType="local:FilterRow">

      <Grid>

         <Border x:Name="rootBorder"
					  Background="{TemplateBinding Background}"
					  BorderBrush="{TemplateBinding BorderBrush}"
					  BorderThickness="{TemplateBinding BorderThickness}"
					  Padding="{TemplateBinding Padding}">

            <!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
            <DockPanel x:Name="PART_RowFocusRoot">

               <!-- Border that contains the Title of the Card. -->
               <Border x:Name="cardTitleBorder"
							  DockPanel.Dock="Top"
							  BorderBrush="{TemplateBinding BorderBrush}"
							  BorderThickness="0,0,0,1"
							  Padding="3,1,3,3"
							  Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
							  TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
							  TextElement.FontWeight="Bold">

                  <!-- ContentPresenter in charge of displaying the Card Title. -->
                  <ContentPresenter x:Name="cardTitlePresenter"
												ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FilterCardTitleTemplate}"
												MinHeight="15"
												HorizontalAlignment="Left"
												VerticalAlignment="Center" />

               </Border>

               <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
               <StackPanel x:Name="PART_CellsHost"
									Orientation="Vertical"
									Visibility="Visible"
									Margin="3"
									Grid.IsSharedSizeScope="True" />

            </DockPanel>
         </Border>

         <!-- ContentPresenter in charge of displaying the glyph that represents
              the state of the row (like IsBeingEdited) -->
         <ContentPresenter x:Name="glyphPresenter"
									Content="{x:Null}"
									ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FilterRowGlyph}"
									HorizontalAlignment="Right"
									VerticalAlignment="Top" />
      </Grid>

      <ControlTemplate.Triggers>

         <!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
								  Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="True"/>

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
						  Property="Background"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

            <Setter TargetName="cardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />

         </MultiDataTrigger>

         <!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
								  Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
								  Value="False"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=HideSelection}"
								  Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
						  Property="Background"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionBackground}" />

            <Setter TargetName="cardTitleBorder"
						  Property="TextElement.Foreground"
						  Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>

         <Trigger Property="NavigationBehavior"
                  Value="CellOnly">
           <Setter TargetName="cardTitleBorder"
                   Property="Focusable"
                   Value="True" />
         </Trigger>

    </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
     * TEMPLATE: FilterToggleButton
      **************************-->
	<ControlTemplate TargetType="{x:Type ToggleButton}"
						  x:Key="filterToggleButton">

		<Grid Background="Transparent"
				VerticalAlignment="Stretch"
				HorizontalAlignment="Stretch">

			<Grid Width="20"
					Background="Transparent"
					HorizontalAlignment="Center">

				<ContentPresenter x:Name="glyphPresenter"
										ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"
										Content="{TemplateBinding Content}"
										VerticalAlignment="Center"
										HorizontalAlignment="Center"
										Margin="0,0,0,0"
										Opacity="{TemplateBinding Opacity}"/>

				<ContentPresenter x:Name="filterActivatedGlyphPresenter"
										ContentTemplate="{x:Null}"
										Content="{TemplateBinding Content}"
										VerticalAlignment="Center"
										HorizontalAlignment="Center"
										Margin="0,0,2,0"
										Opacity="{TemplateBinding Opacity}">

				</ContentPresenter>
			</Grid>
		</Grid>

		<ControlTemplate.Triggers>

			<!-- Display AutoFilterGlyph when there are AutoFilterValues -->
			<DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
							 Value="True">

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{x:Null}"/>

				<Setter TargetName="filterActivatedGlyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterGlyph}"/>

			</DataTrigger>
			<!-- Restore DropDownGlyph when there are no AutoFilterValues -->
			<DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
							 Value="False">

				<Setter TargetName="glyphPresenter"
						  Property="ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"/>

			</DataTrigger>

		</ControlTemplate.Triggers>

	</ControlTemplate>

	<!--**************************
    * TEMPLATE: ColumnManagerCell 
    ************************** -->
	<ControlTemplate x:Key="cardViewColumnManagerCellTemplate"
						  TargetType="local:ColumnManagerCell">
      <ControlTemplate.Resources>
         <Style TargetType="ToggleButton">
            <Setter Property="Template"
                    Value="{StaticResource filterToggleButton}"/>
         </Style>
      </ControlTemplate.Resources>


      <Border BorderBrush="{TemplateBinding BorderBrush}"
				  BorderThickness="{TemplateBinding BorderThickness}">

			<!-- This Grid is used to layout the ContentPresenter and the Sort Glyph (when present). -->
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition />
				</Grid.ColumnDefinitions>

				<Border x:Name="toggleButtonBorder"
						  Grid.Column="0"
						  Background="Transparent"
						  Margin="0,0,0,0"
						  IsHitTestVisible="True">
					<ToggleButton x:Name="toggleButton"									  
									  TextElement.Foreground="{TemplateBinding TextElement.Foreground}"
									  Focusable="False"
									  Visibility="Hidden"
									  Margin="0,0,0,0"
									  Opacity="0.5"/>
				</Border>

				<local:AutoFilterPopup x:Name="filterOptions"
											  PopupAnimation="Slide"
											  IsOpen="{Binding ElementName=toggleButton,
                                                Path=IsChecked,
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged}"
											  StaysOpen="False"
											  AllowsTransparency="True"
											  PlacementTarget="{Binding ElementName=toggleButton}" >

					<local:AutoFilterControl x:Name="autoFilterControl"
													 Background="White"
													 BorderBrush="Black"
													 BorderThickness="1"
													 AutoFilterColumn="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:ColumnManagerCell},
                                                            Path=ParentColumn}"
													 Style="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:ColumnManagerCell}, 
                                                 Path=ParentColumn.AutoFilterControlStyle}"
                                        Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
				</local:AutoFilterPopup>

				<Grid x:Name="cellPartGrid"
						Grid.Column="1">

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition/>
					</Grid.ColumnDefinitions>

					<Border x:Name="separationLine"
							  Width="2"
							  BorderThickness="1,0,0,0"
							  Background="White"
							  Margin="0,0,0,0"
							  HorizontalAlignment="Left"
							  BorderBrush="Black"
							  Opacity="0.2"
							  Grid.Column="0"/>

					<Border x:Name="cellBorder"
							  HorizontalAlignment="Stretch"
							  Grid.Column="1"
							  Padding="{TemplateBinding Padding}"
							  Background="{TemplateBinding Background}">

						<StackPanel Orientation="Horizontal">


							<!-- Same ContentPresenter as in the base Cell Template. -->
                     <local:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                 Margin="3,0,0,0" />

                     <!-- ContentPresenter that is used to display the sort glyph.
                 We explicitely set its Content property to Null to prevent the XAML parser
                 from implicitely setting it to its TemplatedParent's Content. -->
							<ContentPresenter x:Name="sortGlyphPresenter"
													Content="{x:Null}"
													ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}"
													Margin="6,0,0,0"
													Visibility="Hidden" />

						</StackPanel>
					</Border>
				</Grid>
			</Grid>
		</Border>

		<ControlTemplate.Triggers>
			<!-- Trigger related to the filteringToggleButton-->
			<Trigger SourceName="toggleButton"
						Property="IsMouseOver"
						Value="True">

				<Setter TargetName="toggleButton"
						  Property="Opacity"
						  Value="1"/>

			</Trigger>

			<!-- Do not change toggleButton Background on MouseOver if filterOptions is opened -->
			<MultiTrigger>
				<MultiTrigger.Conditions>

					<Condition SourceName="toggleButton"
								  Property="IsMouseOver"
								  Value="True"/>

					<Condition  SourceName="filterOptions"
									Property="IsOpen"
									Value="False"/>

				</MultiTrigger.Conditions>

				<Setter TargetName="toggleButtonBorder"
						  Property="Background"
						  Value="{StaticResource groupByItemHotBackgroundBrush}" />

			</MultiTrigger>

			<!-- Always visible if filterOptions popup IsOpen -->
			<Trigger SourceName="filterOptions"
						Property="IsOpen"
						Value="True">

				<Setter TargetName="toggleButton"
						  Property="Visibility"
						  Value="Visible"/>

				<Setter TargetName="toggleButton"
						  Property="Opacity"
						  Value="1"/>

				<Setter TargetName="toggleButtonBorder"
						  Property="Background"
						  Value="{StaticResource groupByItemHotBackgroundBrush}"/>

			</Trigger>

			<!-- Display FilterToggleButton Trigger on MouseOver -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
								  Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
								  Value="True"/>

					<Condition Value="True"
								  Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}"/>

				</MultiDataTrigger.Conditions>

				<Setter TargetName="toggleButton"
						  Property="Visibility"
						  Value="Visible"/>

			</MultiDataTrigger>

			<!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->
			<MultiDataTrigger >
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
								  Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Value="True"
								  Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}"/>

					<Condition Value="True"
								  Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"/>

				</MultiDataTrigger.Conditions>

				<Setter TargetName="toggleButton"
						  Property="Visibility"
						  Value="Visible"/>

				<Setter TargetName="toggleButton"
						  Property="Opacity"
						  Value="1"/>

			</MultiDataTrigger>


			<!-- DataTrigger to disable HitTesting on filtering ToggleButton 
             when there are no DistinctValues-->
			<DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}"
							 Value="False">

				<Setter TargetName="toggleButtonBorder"
						  Property="IsHitTestVisible"
						  Value="False"/>

			</DataTrigger>

			<!-- The following 2 triggers allow to display the appropriate Sort Glyph
              depending on the ParentColumn's SortDirection. -->

			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
							 Value="Ascending">

				<Setter TargetName="sortGlyphPresenter"
						  Property="Visibility"
						  Value="Visible"/>

			</DataTrigger>

			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
							 Value="Descending">

				<Setter TargetName="sortGlyphPresenter"
						  Property="ContentPresenter.ContentTemplate"
						  Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}"/>

				<Setter TargetName="sortGlyphPresenter"
						  Property="Visibility"
						  Value="Visible"/>

			</DataTrigger>

			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
							 Value="False">

				<Setter Property="Visibility"
						  Value="Collapsed"/>

			</DataTrigger>

			<Trigger SourceName="cellPartGrid"
						Property="IsMouseOver"
						Value="True">

				<Setter TargetName="cellBorder"
						  Property="Background"
						  Value="{StaticResource groupByItemHotBackgroundBrush}"/>

			</Trigger>

			<Trigger SourceName="toggleButton"
						Property="IsPressed"
						Value="True">

				<Setter TargetName="toggleButtonBorder"
						  Property="Background"
						  Value="{StaticResource groupByItemBackgroundBrush}" />

			</Trigger>

			<Trigger Property="IsBeingDragged"
						Value="True">

				<Setter TargetName="cellBorder"
						  Property="Background"
						  Value="{StaticResource groupByItemBackgroundBrush}"/>

				<Setter TargetName="toggleButtonBorder"
						  Property="Visibility"
						  Value="Hidden"/>

			</Trigger>

		</ControlTemplate.Triggers>

	</ControlTemplate>

	<!-- =================================================================== -->
	<!-- Styles required by some grid elements                               -->
	<!-- =================================================================== -->

	<!--**************************
    * STYLE: CellErrorStyle 
    ************************** -->
	<Style x:Key="cellErrorStyle"
			 TargetType="local:Cell">

		<Setter Property="Background"
				  Value="{StaticResource errorBackgroundBrush}"/>

		<Setter Property="Foreground"
				  Value="{StaticResource errorForegroundBrush}"/>

		<Setter Property="ToolTip"
				  Value="{Binding RelativeSource={RelativeSource Self},Path=ValidationError.ErrorContent}"/>


        <Style.Triggers>
            <Trigger Property="IsValidationErrorRestrictive"
                     Value="True">
                <Setter Property="Background"
                        Value="{StaticResource errorBackgroundBrush}" />

            </Trigger>

            <Trigger Property="IsValidationErrorRestrictive"
                     Value="False">

                <Setter Property="Foreground"
                        Value="{StaticResource warningForegroundBrush}" />

                <Setter Property="Background"
                        Value="{StaticResource warningBackgroundBrush}" />

            </Trigger>
        </Style.Triggers>

    </Style>

	<!-- =================================================================== -->
	<!-- Keyed Styles of grid elements                                       -->
	<!-- =================================================================== -->

	<!--**************************
    * STYLE: DataGridControl 
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadGridControlStyle"
			 TargetType="local:DataGridControl">

		<Setter Property="BorderBrush"
				  Value="{StaticResource gridControlBorderBrush}" />

		<Setter Property="BorderThickness"
				  Value="1" />

		<Setter Property="Background"
				  Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

		<Setter Property="Foreground"
				  Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />

		<!-- In CardView, it is more convenient to use Row/Explicit navigation than Cell navigation. -->
		<Setter Property="NavigationBehavior"
				  Value="RowOrCell"/>

		<!-- For the horizontal scrolling of the CardView, PagingBehavior.LeftToRight is better suited 
           than the default TopToBottom. -->
		<Setter Property="PagingBehavior"
				  Value="LeftToRight"/>

		<!-- This is required to display gridlines of uniform thickness -->
		<Setter Property="SnapsToDevicePixels"
				  Value="True" />

		<Setter Property="CellErrorStyle"
				  Value="{StaticResource cellErrorStyle}" />

		<Setter Property="Template"
				  Value="{StaticResource cardViewDataGridControlTemplate}" />

	</Style>

   <!--**************************
    * STYLE: DataGridControl (with hosted controls theming)
    ************************** -->
   <Style x:Key="cardViewForcedLunaHomesteadGridControlStyle"
          BasedOn="{StaticResource cardViewLunaHomesteadGridControlStyle}"
          TargetType="local:DataGridControl">

      <Style.Resources>
         <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
               <ResourceDictionary Source="/PresentationFramework.Luna;V3.0.0.0;31bf3856ad364e35;component\themes/luna.homestead.xaml" />
               <utils:XceedResourceDictionary XceedSource="/Xceed.Wpf.Controls;component\themes/generic.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--**************************
             * STYLE: NavigableComboBox
             ************************** -->
            <Style TargetType="{x:Type xcdp:NavigableComboBox}"
                   BasedOn="{StaticResource {x:Type ComboBox}}" />
         </ResourceDictionary>
      </Style.Resources>

   </Style>

   <!--**************************
    * STYLE: Row Style
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadRowStyle"
			 TargetType="local:Row">

		<Setter Property="SelectionBackground"
				  Value="{StaticResource selectionBackgroundBrush}" />

		<Setter Property="SelectionForeground"
				  Value="{StaticResource selectionForegroundBrush}" />

		<Setter Property="InactiveSelectionBackground"
				  Value="{StaticResource inactiveSelectionBackgroundBrush}" />

		<Setter Property="InactiveSelectionForeground"
				  Value="{StaticResource inactiveSelectionForegroundBrush}" />

		<Setter Property="Margin"
				  Value="5" />

		<Setter Property="BorderThickness"
				  Value="1" />

		<Setter Property="BorderBrush"
				  Value="{StaticResource cardBorderBrush}" />

		<!-- Set the Row's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying DataGridControl. -->
		<Setter Property="Background"
				  Value="Transparent" />

		<Setter Property="Template"
				  Value="{StaticResource cardViewRowTemplate}" />
	</Style>

	<!--**************************
    * STYLE: DataRow 
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadDataRowStyle"
			 TargetType="local:DataRow"
			 BasedOn="{StaticResource cardViewLunaHomesteadRowStyle}" />

	<!--**************************
    * STYLE: InsertionRow 
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadInsertionRowStyle"
			 TargetType="local:InsertionRow"
			 BasedOn="{StaticResource cardViewLunaHomesteadDataRowStyle}">

		<Setter Property="Template"
				  Value="{StaticResource cardViewInsertionRowTemplate}" />

	</Style>

	<!--**************************
    * STYLE: ColumnManagerRow 
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadColumnManagerRowStyle"
			 TargetType="local:ColumnManagerRow">

		<Setter Property="Background"
				  Value="{StaticResource selectionBackgroundBrush}" />

		<Setter Property="Foreground"
				  Value="{StaticResource selectionForegroundBrush}" />

		<Setter Property="views:UIViewBase.DropMarkOrientation"
				  Value="Horizontal" />

		<Setter Property="Template"
				  Value="{StaticResource cardViewColumnManagerRowTemplate}" />

	</Style>

	<!--**************************
    * STYLE: StatRow 
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadStatRowStyle"
			 TargetType="local:StatRow"
			 BasedOn="{StaticResource cardViewLunaHomesteadRowStyle}">

		<Setter Property="Template"
				  Value="{StaticResource cardViewStatRowTemplate}"/>

	</Style>

   <!--**************************
    * STYLE: FilterRow
    ************************** -->
   <Style x:Key="cardViewLunaHomesteadFilterRowStyle"
			 TargetType="local:FilterRow"
			 BasedOn="{StaticResource cardViewLunaHomesteadRowStyle}">

      <Setter Property="BorderThickness"
              Value="1"/>

      <Setter Property="Template"
				  Value="{StaticResource cardViewFilterRowTemplate}"/>

   </Style>
   
   <!--**************************
    * STYLE: Cell Style
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadCellStyle"
			 TargetType="local:Cell">

		<Setter Property="CurrentBackground"
				  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

		<Setter Property="CurrentForeground"
				  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />

		<!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
		<Setter Property="Background"
				  Value="Transparent" />

		<!-- A basic Cell Template requires at least a ContentPresenter that is used to display the Cell's Content.
           This ContentPresenter is usually placed inside a Border who is responsible for painting the gridlines. -->
		<Setter Property="Template"
				  Value="{StaticResource cardViewCellTemplate}" />

	</Style>

	<!--**************************
    * STYLE: DataCell
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadDataCellStyle"
			 TargetType="local:DataCell"
			 BasedOn="{StaticResource cardViewLunaHomesteadCellStyle}" >

		<Style.Triggers>

			<MultiDataTrigger>

				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.IsBeingEdited}"
								  Value="False"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Content, Mode=OneWay, Converter={StaticResource nullToBooleanConverter}}"
								  Value="True"/>

				</MultiDataTrigger.Conditions>

				<Setter Property="Visibility"
						  Value="Collapsed"/>

			</MultiDataTrigger>

		</Style.Triggers>

	</Style>

	<!--**************************
    * STYLE: InsertionCell
   ************************** -->
	<Style x:Key="cardViewLunaHomesteadInsertionCellStyle"
			 TargetType="local:InsertionCell"
			 BasedOn="{StaticResource cardViewLunaHomesteadCellStyle}" />

	<!--**************************
    * STYLE: ColumnManagerCell 
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadColumnManagerCellStyle"
			 TargetType="local:ColumnManagerCell">

		<!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
		<Setter Property="Background"
				  Value="Transparent"/>

		<Setter Property="Padding"
				  Value="{StaticResource cellPadding}" />

		<!-- We don't use the base Cell Template for the ColumnManagerCell because it need more elements
           to function properly, like a glyph that represents the Column's SortDirection. -->
		<Setter Property="Template"
				  Value="{StaticResource cardViewColumnManagerCellTemplate}" />

		<Style.Triggers>

			<Trigger Property="IsPressed"
						Value="True">

				<Setter Property="Background"
						  Value="{StaticResource groupByItemBackgroundBrush}"/>

			</Trigger>
		</Style.Triggers>
	</Style>

	<!--**************************
    * STYLE: StatCell Style
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadStatCellStyle"
			 TargetType="local:StatCell">

		<!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
		<Setter Property="Background"
				  Value="Transparent" />

		<!-- A basic Cell Template requires at least a ContentPresenter, which is used to display the Cell's Content.
           This ContentPresenter is usually placed inside a Border that is responsible for painting the gridlines. -->
		<Setter Property="Template"
				  Value="{StaticResource cardViewStatCellTemplate}" />

		<Style.Triggers>

			<!-- Collapse the cell when HideEmptyCells is true and the StatFunction returns null. -->
			<MultiDataTrigger>

				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Content, Mode=OneWay, Converter={StaticResource nullToBooleanConverter}}"
								  Value="True"/>

				</MultiDataTrigger.Conditions>

				<Setter Property="Visibility"
						  Value="Collapsed"/>

			</MultiDataTrigger>

			<!-- Collapse the cell when HideEmptyCells is true and no StatFunction is defined for the cell. -->
			<MultiDataTrigger>

				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
								  Value="True"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasContent}"
								  Value="False"/>

				</MultiDataTrigger.Conditions>

				<Setter Property="Visibility"
						  Value="Collapsed"/>

			</MultiDataTrigger>

			<!-- Hide the cell when HideEmptyCells is false and no StatFunction is defined for the cell. -->
			<MultiDataTrigger>

				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).HideEmptyCells}"
								  Value="False"/>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasContent}"
								  Value="False"/>

				</MultiDataTrigger.Conditions>

				<Setter Property="Visibility"
						  Value="Hidden"/>

			</MultiDataTrigger>

		</Style.Triggers>

	</Style>

   <!--**************************
    * STYLE: FilterCell
    ************************** -->
   <Style x:Key="cardViewLunaHomesteadFilterCellStyle"
			 TargetType="local:FilterCell"
          BasedOn="{StaticResource cardViewLunaHomesteadCellStyle}">
      <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
      <Setter Property="Background"
				  Value="Transparent" />

      <Setter Property="Template"
              Value="{StaticResource cardViewFilterCellTemplate}"/>
   </Style>

   <!--**************************
    * STYLE: GroupByControl 
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadGroupByControlStyle"
			 TargetType="local:GroupByControl">

		<!-- If we don't specify a MinHeight, the default "size-to-content" behavior will arrange 
           the control with a Height of 0, which makes it invisible and unusable.
           In a typical CardView, a height of at least 50 is appropriate for the GroupByControl. -->
		<Setter Property="MinHeight"
				  Value="50" />

		<Setter Property="Background"
				  Value="{StaticResource cardTitleBackgroundBrush}" />

		<Setter Property="Foreground"
				  Value="{StaticResource cardTitleForegroundBrush}" />

		<Setter Property="Padding"
				  Value="8"/>

		<Setter Property="Template"
				  Value="{StaticResource cardViewGroupByControlTemplate}" />

	</Style>

	<!--**************************
    * STYLE: GroupByItem
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadGroupByItemStyle"
			 TargetType="local:GroupByItem">

		<Setter Property="Background"
				  Value="{StaticResource groupByItemBackgroundBrush}" />

		<Setter Property="Foreground"
				  Value="{StaticResource groupByItemForegroundBrush}" />

		<Setter Property="Padding"
				  Value="{StaticResource cellPadding}" />

		<Setter Property="BorderBrush"
				  Value="{StaticResource groupByItemBorderBrush}" />

		<Setter Property="BorderThickness"
				  Value="1" />

		<Setter Property="Template"
				  Value="{StaticResource cardViewGroupByItemTemplate}" />

		<Style.Triggers>
			<Trigger Property="IsMouseOver"
						Value="True">

				<Setter Property="Background"
						  Value="{StaticResource groupByItemHotBackgroundBrush}" />

			</Trigger>

			<Trigger Property="IsPressed"
						Value="True">

				<Setter Property="Background"
						  Value="{StaticResource groupByItemPressedBackgroundBrush}" />

			</Trigger>

		</Style.Triggers>

	</Style>

	<!--**************************
    * STYLE: GroupHeaderControl
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadGroupHeaderControlStyle"
			 TargetType="local:GroupHeaderControl">

		<Setter Property="Background"
				  Value="{StaticResource groupHeaderBackgroundBrush}" />

		<Setter Property="Foreground"
				  Value="{StaticResource groupHeaderForegroundBrush}" />

		<Setter Property="BorderBrush"
				  Value="{StaticResource groupHeaderBorderBrush}" />

		<Setter Property="BorderThickness"
				  Value="1" />

		<Setter Property="Margin"
				  Value="5,0,5,5" />

		<Setter Property="Padding"
				  Value="{StaticResource cellPadding}" />

		<Setter Property="VerticalContentAlignment"
				  Value="Center" />

		<!-- The GroupHeaderControl itself must not be focusable. The main Border inside its Template will
           be made Focusable because it is holding the various InputBindings that make the
           GroupHeaderControl work. -->
		<Setter Property="Focusable"
				  Value="False" />

		<Setter Property="Template"
				  Value="{StaticResource cardViewGroupHeaderControlTemplate}" />

		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=Content.IsBottomLevel}"
								  Value="False" />

					<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=Content.IsExpanded}"
								  Value="True" />

				</MultiDataTrigger.Conditions>

				<Setter Property="Visibility"
						  Value="Collapsed" />

			</MultiDataTrigger>
		</Style.Triggers>

	</Style>

	<!--**************************
    * STYLE: GroupLevelIndicator
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadGroupLevelIndicatorStyle"
			 TargetType="local:GroupLevelIndicator">

		<Setter Property="Width"
				  Value="12" />

	</Style>

	<!--**************************
    * STYLE: DetailIndicator
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadDetailIndicatorStyle"
			 TargetType="local:DetailIndicator">

		<Setter Property="Width"
				  Value="12" />

	</Style>

	<!--**************************
    * STYLE: GroupLevelIndicatorPane
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadGroupLevelIndicatorPaneStyle"
			 TargetType="local:GroupLevelIndicatorPane">

		<Setter Property="Template"
				  Value="{StaticResource cardViewGroupLevelIndicatorPaneTemplate}" />

	</Style>

	<!--**************************
    * STYLE: GroupLevelIndicatorPane
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadHierarchicalGroupLevelIndicatorPaneStyle"
			 TargetType="local:HierarchicalGroupLevelIndicatorPane">

		<Setter Property="Template"
				  Value="{StaticResource cardViewHierarchicalGroupLevelIndicatorPaneTemplate}" />

	</Style>

	<!--**************************
    * STYLE: AutoFilterControl
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadAutoFilterControlStyle"
			 TargetType="local:AutoFilterControl">

		<Setter Property="Template"
				  Value="{StaticResource cardViewAutoFilterControlTemplate}"/>
      <Setter Property="DistinctValueItemContainerStyle"
              Value="{StaticResource defaultAutoFilteringCheckBoxItemStyle}" />
   </Style>

   <!--**************************
    * STYLE: MenuItem (for the ColumnChooserContextMenu)
    ************************** -->
   <Style x:Key="cardViewLunaHomesteadColumnChooserContextMenuMenuItemStyle"
          TargetType="{x:Type MenuItem}">
      <Setter Property="IsCheckable"
              Value="True" />
      <Setter Property="IsChecked"
              Value="{Binding Path=Visible}" />
      <Setter Property="StaysOpenOnClick"
              Value="True" />
   </Style>
   
   <!--**************************
    * STYLE: ColumnChooserContextMenu
    ************************** -->
   <Style x:Key="cardViewLunaHomesteadColumnChooserContextMenuStyle"
          TargetType="{x:Type local:ColumnChooserContextMenu}"
          BasedOn="{StaticResource {x:Type ContextMenu}}">
      <Setter Property="ItemContainerStyle"
              Value="{StaticResource cardViewLunaHomesteadColumnChooserContextMenuMenuItemStyle}" />
      <Setter Property="DisplayMemberPath"
              Value="Title" />
      <Setter Property="SortOrder"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ColumnChooserSortOrder}" />
   </Style>

   <!--**************************
    * STYLE: ScrollTip
    ************************** -->
	<Style x:Key="cardViewLunaHomesteadScrollTipStyle"
			 TargetType="local:ScrollTip">

		<Setter Property="Template"
				  Value="{StaticResource scrollTipTemplate}"/>

		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0.5,1"
											EndPoint="0.5,0">
					<GradientStop Color="#FFC7CDAC"
									  Offset="0" />

					<GradientStop Color="#FFE8ECD1"
									  Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>

		<Setter Property="BorderBrush"
				  Value="#FF849072"/>

		<Setter Property="TextElement.Foreground"
				  Value="Black"/>

		<Setter Property="VerticalAlignment"
				  Value="Bottom"/>

		<Setter Property="HorizontalAlignment"
				  Value="Center"/>

	</Style>

   <!-- =================================================================== -->
	<!-- Default values for the View                                         -->
	<!-- =================================================================== -->

	<Style x:Key="cardViewLunaHomesteadDefaultValues"
			 TargetType="views:CardView">

		<Setter Property="DefaultDropMarkPen"
				  Value="{StaticResource dropMarkPen}" />

		<Setter Property="CardTitleBackground"
				  Value="{StaticResource cardTitleBackgroundBrush}" />

		<Setter Property="CardTitleForeground"
				  Value="{StaticResource cardTitleForegroundBrush}" />

		<Setter Property="AutoFilterDropDownGlyph"
				  Value="{StaticResource autoFilterDropDownGlyph}"/>

		<Setter Property="AutoFilterGlyph"
				  Value="{StaticResource autoFilterGlyph}"/>

		<!-- Those glyphs are null by default on ViewBase, so every Theme should define
           and set their own custom glyphs. -->

		<Setter Property="AscendingSortGlyph"
				  Value="{StaticResource ascendingSortGlyph}" />

		<Setter Property="DescendingSortGlyph"
				  Value="{StaticResource descendingSortGlyph}" />

		<Setter Property="ExpandGroupGlyph"
				  Value="{StaticResource expandGroupGlyph}" />

		<Setter Property="CollapseGroupGlyph"
				  Value="{StaticResource collapseGroupGlyph}" />

		<Setter Property="CurrentItemGlyph"
				  Value="{StaticResource currentItemGlyph}" />

		<Setter Property="EditingRowGlyph"
				  Value="{StaticResource editingRowGlyph}" />

		<Setter Property="ValidationErrorGlyph"
				  Value="{StaticResource validationErrorGlyph}" />

		<Setter Property="InsertionRowGlyph"
				  Value="{StaticResource insertionRowGlyph}" />
      
      <Setter Property="FilterRowGlyph"
				  Value="{StaticResource filterRowGlyph}" />

      <Setter Property="ClearFilterButtonGlyph"
              Value="{StaticResource clearFilterButtonGlyph}" />

      <Setter Property="ConnectionStateLoadingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}"/>

      <Setter Property="ConnectionStateCommittingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}"/>

      <Setter Property="ConnectionStateErrorGlyph"
              Value="{StaticResource connectionStateErrorGlyph}"/>

   </Style>


	<!-- =================================================================== -->
	<!-- DefaultStyleKey declarations                                        -->
	<!-- =================================================================== -->

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme}"
			 TargetType="views:CardView"
			 BasedOn="{StaticResource cardViewLunaHomesteadDefaultValues}" />

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:DataGridControl}"
			 TargetType="local:DataGridControl"
			 BasedOn="{StaticResource cardViewForcedLunaHomesteadGridControlStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:Row}"
			 TargetType="local:Row"
			 BasedOn="{StaticResource cardViewLunaHomesteadRowStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:DataRow}"
			 TargetType="local:DataRow"
			 BasedOn="{StaticResource cardViewLunaHomesteadDataRowStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:InsertionRow}"
			 TargetType="local:InsertionRow"
			 BasedOn="{StaticResource cardViewLunaHomesteadInsertionRowStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:ColumnManagerRow}"
			 TargetType="local:ColumnManagerRow"
			 BasedOn="{StaticResource cardViewLunaHomesteadColumnManagerRowStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:StatRow}"
			 TargetType="local:StatRow"
			 BasedOn="{StaticResource cardViewLunaHomesteadStatRowStyle}"/>
   
   <Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:FilterRow}"
			 TargetType="local:FilterRow"
			 BasedOn="{StaticResource cardViewLunaHomesteadFilterRowStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:Cell}"
			 TargetType="local:Cell"
			 BasedOn="{StaticResource cardViewLunaHomesteadCellStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:DataCell}"
			 TargetType="local:DataCell"
			 BasedOn="{StaticResource cardViewLunaHomesteadDataCellStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:InsertionCell}"
			 TargetType="local:InsertionCell"
			 BasedOn="{StaticResource cardViewLunaHomesteadInsertionCellStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:ColumnManagerCell}"
			 TargetType="local:ColumnManagerCell"
			 BasedOn="{StaticResource cardViewLunaHomesteadColumnManagerCellStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:StatCell}"
			 TargetType="local:StatCell"
			 BasedOn="{StaticResource cardViewLunaHomesteadStatCellStyle}"/>

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:FilterCell}"
			 TargetType="local:FilterCell"
			 BasedOn="{StaticResource cardViewLunaHomesteadFilterCellStyle}"/>

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:GroupByControl}"
			 TargetType="local:GroupByControl"
			 BasedOn="{StaticResource cardViewLunaHomesteadGroupByControlStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:GroupByItem}"
			 TargetType="local:GroupByItem"
			 BasedOn="{StaticResource cardViewLunaHomesteadGroupByItemStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:GroupHeaderControl}"
			 TargetType="local:GroupHeaderControl"
			 BasedOn="{StaticResource cardViewLunaHomesteadGroupHeaderControlStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:GroupLevelIndicator}"
			 TargetType="local:GroupLevelIndicator"
			 BasedOn="{StaticResource cardViewLunaHomesteadGroupLevelIndicatorStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:DetailIndicator}"
         TargetType="local:DetailIndicator"
         BasedOn="{StaticResource cardViewLunaHomesteadDetailIndicatorStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:GroupLevelIndicatorPane}"
			 TargetType="local:GroupLevelIndicatorPane"
			 BasedOn="{StaticResource cardViewLunaHomesteadGroupLevelIndicatorPaneStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:HierarchicalGroupLevelIndicatorPane}"
			 TargetType="local:HierarchicalGroupLevelIndicatorPane"
			 BasedOn="{StaticResource cardViewLunaHomesteadHierarchicalGroupLevelIndicatorPaneStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:AutoFilterControl}"
			 TargetType="local:AutoFilterControl"
			 BasedOn="{StaticResource cardViewLunaHomesteadAutoFilterControlStyle}"/>

	<Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:ScrollTip}"
			 TargetType="local:ScrollTip"
			 BasedOn="{StaticResource cardViewLunaHomesteadScrollTipStyle}"/>

   <Style x:Key="{markup:ThemeKey TargetViewType=views:CardView, ThemeType=views:LunaHomesteadTheme, TargetElementType=local:ColumnChooserContextMenu}"
			 TargetType="local:ColumnChooserContextMenu"
			 BasedOn="{StaticResource cardViewLunaHomesteadColumnChooserContextMenuStyle}"/>

</ResourceDictionary>
