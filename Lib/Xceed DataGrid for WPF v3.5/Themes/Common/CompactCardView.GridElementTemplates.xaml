<!-- =======================================================================
  Xceed DataGrid for WPF - CUSTOMIZATION CODE - Default Styles and Templates
  Copyright (c) 2007-2009 Xceed Software Inc.

  [CompactCardView.GridElementTemplates.xaml]

  This file is part of the Xceed DataGrid for WPF product. The use and
  distribution of this Customization Code is subject to the terms
  and conditions refering to "Customization Code" that are specified in
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
======================================================================= -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:conv="clr-namespace:Xceed.Wpf.DataGrid.Converters"
                    xmlns:local="clr-namespace:Xceed.Wpf.DataGrid"
                    xmlns:markup="clr-namespace:Xceed.Wpf.DataGrid.Markup"
                    xmlns:views="clr-namespace:Xceed.Wpf.DataGrid.Views">

   <ResourceDictionary.MergedDictionaries>
      <ResourceDictionary Source="Common.Resources.xaml" />
   </ResourceDictionary.MergedDictionaries>

   <!--**************************
    * TEMPLATE: DataGridControl 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewDataGridControlTemplate"
                    TargetType="local:DataGridControl">
     <Grid>
      <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">

         <!-- The AdornerDecorator will allow visual cues for Drag & Drop operations. -->
         <AdornerDecorator x:Name="PART_DragDropAdornerDecorator">
            <!-- The CardViewScrollViewer takes care of laying out the various sections of
              a DataGrid in CardView: FixedHeaders, FixedFooters, etc. -->
            <views:CardViewScrollViewer x:Name="PART_ScrollViewer"
                                        Padding="{TemplateBinding Padding}">

               <views:CardViewItemsHost Margin="0,15,0,5" 
                                  Orientation="Vertical"
                                  FixedSize="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardWidth, Mode=TwoWay}"
                                  AllowCardResize="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AllowCardResize}"
                                  SeparatorLinePen="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).SeparatorLinePen}" />

            </views:CardViewScrollViewer>
         </AdornerDecorator>

      </Border>
         <Grid x:Name="connectionStateGrid"
               HorizontalAlignment="Right"
               VerticalAlignment="Bottom"
               Margin="0,0,25,25"
               Height="30"
               Width="30">
            <ContentPresenter x:Name="connectionStateLoadingContentPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ConnectionStateLoadingGlyph}"
                              Content="{TemplateBinding ConnectionState}"
                              Visibility="Collapsed"/>
            <ContentPresenter x:Name="connectionStateCommittingContentPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ConnectionStateCommittingGlyph}"
                              Content="{TemplateBinding ConnectionState}"
                              Visibility="Collapsed"/>
            <ContentPresenter x:Name="connectionStateErrorContentPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ConnectionStateErrorGlyph}"
                              Content="{TemplateBinding ConnectionState}"
                              Visibility="Collapsed"/>
         </Grid>
      </Grid>
      <ControlTemplate.Triggers>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).IsConnectionStateGlyphEnabled}"
                      Value="False">
            <Setter TargetName="connectionStateGrid"
                    Property="Visibility"
                    Value="Collapsed"/>
         </DataTrigger>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.ConnectionState}"
                      Value="Loading">
            <Setter TargetName="connectionStateLoadingContentPresenter"
                    Property="Visibility"
                    Value="Visible"/>
            <Setter TargetName="connectionStateErrorContentPresenter"
                    Property="Visibility"
                    Value="Collapsed"/>
            <Setter TargetName="connectionStateCommittingContentPresenter"
                    Property="Visibility"
                    Value="Collapsed"/>
         </DataTrigger>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.ConnectionState}"
                      Value="Committing">
            <Setter TargetName="connectionStateLoadingContentPresenter"
                    Property="Visibility"
                    Value="Collapsed"/>
            <Setter TargetName="connectionStateErrorContentPresenter"
                    Property="Visibility"
                    Value="Collapsed"/>
            <Setter TargetName="connectionStateCommittingContentPresenter"
                    Property="Visibility"
                    Value="Visible"/>
         </DataTrigger>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DataGridControl.ConnectionState}"
                      Value="Error">
            <Setter TargetName="connectionStateLoadingContentPresenter"
                    Property="Visibility"
                    Value="Collapsed"/>
            <Setter TargetName="connectionStateErrorContentPresenter"
                    Property="Visibility"
                    Value="Visible"/>
            <Setter TargetName="connectionStateCommittingContentPresenter"
                    Property="Visibility"
                    Value="Collapsed"/>
         </DataTrigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: Row 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewRowTemplate"
                    TargetType="local:Row">

      <Border x:Name="rootBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
         <DockPanel>

            <!-- Border that contains the Title of the Card. -->
            <Border x:Name="cardTitleBorder"
                    DockPanel.Dock="Top"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="1"
                    Padding="3,1,3,3"
                    Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
                    TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
                    TextElement.FontWeight="Bold">

               <!-- This Grid is used to layout the various elements of the Card Title. -->
               <Grid>

                  <!-- ContentPresenter in charge of displaying the Card Title. -->
                  <ContentPresenter x:Name="cardTitlePresenter"
                                    Content="{Binding}"
                                    ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleTemplate}"
                                    MinHeight="15"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center" />

                  <!-- ContentPresenter in charge of displaying the glyph that represents
                       the state of the row (like IsBeingEdited) -->
                  <ContentPresenter x:Name="glyphPresenter"
                                    Content="{x:Null}"
                                    ContentTemplate="{x:Null}"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center" />

               </Grid>

            </Border>

            <!-- Border that contails the Cells. -->
            <Border x:Name="cellsHostBorder"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="1,0,1,1"
                    Padding="3">

               <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
               <StackPanel x:Name="PART_CellsHost"
                           Orientation="Vertical"
                           Grid.IsSharedSizeScope="True" />

            </Border>
         </DockPanel>

      </Border>

      <ControlTemplate.Triggers>

         <!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"
                          Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
                          Value="True"/>

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />

         </MultiDataTrigger>

         <!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"
                          Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
                          Value="False"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=HideSelection}"
                          Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionBackground}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>

         <Trigger Property="IsCurrent"
                  Value="False">

            <Setter TargetName="cellsHostBorder"
                    Property="BorderBrush"
                    Value="Transparent" />

         </Trigger>

         <Trigger Property="IsBeingEdited"
                  Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).EditingRowGlyph}" />

         </Trigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="IsBeingEdited"
                          Value="False" />

            </MultiTrigger.Conditions>

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CurrentItemGlyph}" />

         </MultiTrigger>

         <Trigger Property="HasValidationError"
                  Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ValidationErrorGlyph}" />

         </Trigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: InsertionRow 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewInsertionRowTemplate"
                    TargetType="local:InsertionRow">

      <Border x:Name="rootBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
         <DockPanel x:Name="PART_RowFocusRoot">

            <!-- Border that contains the Title of the Card. -->
            <Border x:Name="cardTitleBorder"
                    DockPanel.Dock="Top"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="1"
                    Padding="3,1,3,3"
                    Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
                    TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
                    TextElement.FontWeight="Bold">

               <!-- This Grid is used to layout the various elements of the Card Title. -->
               <Grid>

                  <!-- ContentPresenter in charge of displaying the Card Title. -->
                  <ContentPresenter x:Name="cardTitlePresenter"
                                    ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).InsertionCardTitleTemplate}"
                                    MinHeight="15"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center" />

                  <!-- ContentPresenter in charge of displaying the glyph that represents
                       the state of the row (like IsBeingEdited) -->
                  <ContentPresenter x:Name="glyphPresenter"
                                    Content="{x:Null}"
                                    ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).InsertionRowGlyph}"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center" />

               </Grid>

            </Border>

            <!-- Border that contails the Cells. -->
            <Border x:Name="cellsHostBorder"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="1,0,1,1"
                    Padding="3">

               <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
               <StackPanel x:Name="PART_CellsHost"
                           Orientation="Vertical"
                           Visibility="Collapsed"
                           Grid.IsSharedSizeScope="True" />

            </Border>
         </DockPanel>

      </Border>

      <ControlTemplate.Triggers>

         <!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
                          Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
                          Value="True"/>

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />

         </MultiDataTrigger>

         <!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
                          Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
                          Value="False"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=HideSelection}"
                          Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionBackground}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>

         <Trigger Property="IsCurrent"
                  Value="False">

            <Setter TargetName="cellsHostBorder"
                    Property="BorderBrush"
                    Value="Transparent" />

         </Trigger>

         <Trigger Property="IsCurrent"
                  Value="True">

            <Setter TargetName="PART_CellsHost"
                    Property="Visibility"
                    Value="Visible" />

            <Setter TargetName="cardTitleBorder"
                    Property="KeyboardNavigation.IsTabStop"
                    Value="False"/>

         </Trigger>

         <Trigger Property="IsBeingEdited"
                  Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).EditingRowGlyph}" />

            <Setter TargetName="PART_CellsHost"
                    Property="Visibility"
                    Value="Visible" />

         </Trigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="IsBeingEdited"
                          Value="False" />

            </MultiTrigger.Conditions>

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CurrentItemGlyph}" />

         </MultiTrigger>

         <Trigger Property="HasValidationError"
                  Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ValidationErrorGlyph}" />

         </Trigger>

         <Trigger Property="NavigationBehavior"
                  Value="CellOnly">

            <Setter TargetName="cardTitleBorder"
                    Property="Focusable"
                    
                    Value="True"/>
         </Trigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: ColumnManagerRow 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewColumnManagerRowTemplate"
                    TargetType="local:ColumnManagerRow">

      <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <ScrollViewer HorizontalScrollBarVisibility="Disabled"
                       VerticalScrollBarVisibility="Auto">

            <StackPanel x:Name="PART_CellsHost"
                        Orientation="Vertical" />

         </ScrollViewer>

      </Border>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: StatRow 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewStatRowTemplate"
                    TargetType="local:StatRow">

      <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
         <DockPanel>

            <!-- Border that contains the Title of the Card. -->
            <Border DockPanel.Dock="Top"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0,0,0,1"
                    Padding="3,1,3,3"
                    Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
                    TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
                    TextElement.FontWeight="Bold">

               <!-- ContentPresenter in charge of displaying the Card Title. -->
               <ContentPresenter x:Name="cardTitlePresenter"
                                 ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).StatCardTitleTemplate}"
                                 MinHeight="15"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center" />

            </Border>

            <!-- Border that contails the Cells. -->
            <Border Padding="3">

               <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                    It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                    SharedSizeGroup to layout the field names. -->
               <StackPanel x:Name="PART_CellsHost"
                           Orientation="Vertical"
                           Grid.IsSharedSizeScope="True" />

            </Border>
         </DockPanel>

      </Border>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: FilterRow 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewFilterRowTemplate"
                    TargetType="local:FilterRow">

      <Border x:Name="rootBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <!-- In CardView, a Row is represented as a card with a Title at the top and the Cells
              aligned vertically in the reminder part of the template. This DockPanel is used
              to layout the Title and the Cells in this manner. -->
         <DockPanel x:Name="PART_RowFocusRoot">

            <!-- Border that contains the Title of the Card. -->
            <Border x:Name="cardTitleBorder"
                    DockPanel.Dock="Top"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="1"
                    Padding="3,1,3,3"
                    Background="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleBackground}"
                    TextElement.Foreground="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CardTitleForeground}"
                    TextElement.FontWeight="Bold">

               <!-- This Grid is used to layout the various elements of the Card Title. -->
               <Grid>

                  <!-- ContentPresenter in charge of displaying the Card Title. -->
                  <ContentPresenter x:Name="cardTitlePresenter"                                    
                                    MinHeight="15"
                                    ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FilterCardTitleTemplate}"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center" />

                  <!-- ContentPresenter in charge of displaying the glyph that represents
                       the state of the row (like IsBeingEdited) -->
                  <ContentPresenter x:Name="glyphPresenter"                                    
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).FilterRowGlyph}"/>

               </Grid>

            </Border>

            <!-- Border that contails the Cells. -->
            <Border x:Name="cellsHostBorder"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0"
                    Padding="3">
               <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
                  It is set as a Grid.IsSharedSizeScope because the Cell template will use a 
                  SharedSizeGroup to layout the field names. -->
               <StackPanel x:Name="PART_CellsHost"
                           Orientation="Vertical"  
                           Visibility="Visible"
                           Grid.IsSharedSizeScope="True" />
            </Border>

         </DockPanel>

      </Border>

      <ControlTemplate.Triggers>

         <!-- When the Row is Selected, we want to change the background/foreground of the Title to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
                          Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
                          Value="True"/>

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />

         </MultiDataTrigger>

         <!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}"
                          Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=IsKeyboardFocusWithin}"
                          Value="False"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:DataGridControl},Path=HideSelection}"
                          Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="cardTitleBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionBackground}" />

            <Setter TargetName="cardTitleBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>

         <Trigger Property="IsCurrent"
                  Value="True">
            
            <Setter TargetName="cardTitleBorder"
                    Property="KeyboardNavigation.IsTabStop"
                    Value="False"/>
            
            <Setter TargetName="cellsHostBorder"
                    Property="BorderThickness"
                    Value="1,0,1,1"/>            

         </Trigger>
       
      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: Cell 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewCellTemplate"
                    TargetType="local:Cell">

      <Border x:Name="rootBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <!-- In CardView, each cell consists of its FieldName followed by its Content. We use
              a Grid to layout both elements, with a SharedSizeGroup on the column that lays out
              the FieldName. In order for this to work as expected, the Row's CellsHost Panel
              must be set as the Grid.IsSharedSizeScope. -->
         <Grid>

            <Grid.ColumnDefinitions>
               <!-- FieldName -->
               <ColumnDefinition SharedSizeGroup="CellFieldName" />

               <!-- Cell Content -->
               <ColumnDefinition Width="*" />

            </Grid.ColumnDefinitions>

            <!-- Horizontal StackPanel used to lay out the FieldName and a colon. -->
            <StackPanel Grid.Column="0"
                        Orientation="Horizontal"
                        HorizontalAlignment="Left">

               <ContentPresenter Grid.Column="0"
                                 Content="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.Title}"
                                 ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.TitleTemplate}"
                                 ContentTemplateSelector="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.TitleTemplateSelector}" />

               <TextBlock x:Name="separatorText"  Text=": " />

            </StackPanel>

            <local:CellContentPresenter x:Name="PART_CellContentPresenter"
                                        Grid.Column="1"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

         </Grid>

      </Border>

      <ControlTemplate.Triggers>

         <!-- When changing the appearance (e.g. background/foreground) of the Cell to reflect specific
              states (e.g. IsCurrent), it is recommended to apply the changes directly to the template
              elements because we want those modifications to be effective even when a value has been
              explicitely set to these properties on the TemplatedParent. Also, when someone queries
              the value of these properties on the TemplatedParent, we don't want to return the
              intermediate, state-specific values. -->

         <!-- When the Cell is Current, we want to change its background/foreground to the appropriate brushes.
              We do this only when the cell does not have a validation error because we must give priority
              to the CellErrorStyle (if present).-->

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="HasValidationError"
                          Value="False" />

            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentBackground}" />

            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="HasValidationError"
                          Value="True" />

               <Condition Property="CellErrorStyle"
                          Value="{x:Null}" />

            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentBackground}" />

            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentForeground}" />

         </MultiTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">
            <Setter Property="Visibility"
                    Value="Collapsed"/>
         </DataTrigger>

         <!-- DataTrigger to hide the separatorText when ParentColumn.Title is null or Empty. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.Title, Converter={StaticResource emptyStringToBooleanConverter}}" 
                                        Value="True">
            <Setter TargetName="separatorText"
                    Property="Visibility"
                    Value="Hidden"/>
         </DataTrigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
     * TEMPLATE: FilterToggleButton
      **************************-->
   <ControlTemplate TargetType="{x:Type ToggleButton}"
                    x:Key="filterToggleButton">

      <Grid Background="Transparent"
            VerticalAlignment="Stretch"
            HorizontalAlignment="Stretch">

         <Grid Width="20"
               Background="Transparent"
               HorizontalAlignment="Center">

            <ContentPresenter x:Name="glyphPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,0,0"
                              Opacity="{TemplateBinding Opacity}"/>

            <ContentPresenter x:Name="filterActivatedGlyphPresenter"
                              ContentTemplate="{x:Null}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,2,0"
                              Opacity="{TemplateBinding Opacity}">

            </ContentPresenter>
         </Grid>
      </Grid>

      <ControlTemplate.Triggers>

         <!-- Display AutoFilterGlyph when there are AutoFilterValues -->
         <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="True">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{x:Null}"/>

            <Setter TargetName="filterActivatedGlyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterGlyph}"/>

         </DataTrigger>

         <!-- Restore DropDownGlyph when there are no AutoFilterValues -->
         <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="False">

            <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"/>

         </DataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: ColumnManagerCell 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewColumnManagerCellTemplate"
                    TargetType="local:ColumnManagerCell">
      <ControlTemplate.Resources>
         <Style TargetType="ToggleButton">
            <Setter Property="Template"
                    Value="{StaticResource filterToggleButton}"/>
         </Style>
      </ControlTemplate.Resources>

      <Border BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">

         <!-- This Grid is used to layout the ContentPresenter and the Sort Glyph (when present). -->
         <Grid>
            <Grid.ColumnDefinitions>
               <ColumnDefinition Width="Auto"/>
               <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Border x:Name="toggleButtonBorder"
                    Grid.Column="0"
                    Background="Transparent"
                    Margin="0,0,0,0"
                    IsHitTestVisible="True">
               <ToggleButton x:Name="toggleButton"                             
                             TextElement.Foreground="{TemplateBinding TextElement.Foreground}"
                             Focusable="False"
                             Visibility="Hidden"
                             Margin="0,0,0,0"
                             Opacity="0.5"/>
            </Border>

            <local:AutoFilterPopup x:Name="filterOptions"
                                   PopupAnimation="Slide"
                                   IsOpen="{Binding ElementName=toggleButton,
                                                Path=IsChecked,
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged}"
                                   StaysOpen="False"
                                   AllowsTransparency="True"
                                   PlacementTarget="{Binding ElementName=toggleButton}" >

               <local:AutoFilterControl x:Name="autoFilterControl"
                                        Background="White"
                                        BorderBrush="Black"
                                        BorderThickness="1"
                                        AutoFilterColumn="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:ColumnManagerCell},
                                                              Path=ParentColumn}"
                                        Style="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:ColumnManagerCell}, 
                                                   Path=ParentColumn.AutoFilterControlStyle}"
                                        TextElement.Foreground="{TemplateBinding TextElement.Foreground}"/>
            </local:AutoFilterPopup>

            <Grid x:Name="cellPartGrid"
                  Grid.Column="1">

               <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition/>
               </Grid.ColumnDefinitions>

               <Border x:Name="separationLine"
                       Width="2"
                       BorderThickness="1,0,0,0"
                       Background="White"
                       Margin="0,0,0,0"
                       HorizontalAlignment="Left"
                       BorderBrush="Black"
                       Opacity="0.2"
                       Grid.Column="0"/>

               <Border x:Name="cellBorder"
                       HorizontalAlignment="Stretch"
                       Grid.Column="1"
                       Padding="{TemplateBinding Padding}"
                       Background="{TemplateBinding Background}">

                  <StackPanel Orientation="Horizontal">


                     <!-- Same ContentPresenter as in the base Cell Template. -->
                     <local:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                 Margin="3,0,0,0" />

                     <!-- ContentPresenter that is used to display the sort glyph.
                 We explicitely set its Content property to Null to prevent the XAML parser
                 from implicitely setting it to its TemplatedParent's Content. -->
                     <ContentPresenter x:Name="sortGlyphPresenter"
                                       Content="{x:Null}"
                                       ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}"
                                       Margin="6,0,0,0"
                                       Visibility="Hidden" />

                  </StackPanel>
               </Border>
            </Grid>
         </Grid>
      </Border>

      <ControlTemplate.Triggers>
         <!-- Trigger related to the filteringToggleButton-->
         <Trigger SourceName="toggleButton"
                  Property="IsMouseOver"
                  Value="True">

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1"/>
         </Trigger>

         <!-- Always visible if filterOptions popup IsOpen -->
         <Trigger SourceName="filterOptions"
                  Property="IsOpen"
                  Value="True">

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible"/>

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1"/>

         </Trigger>

         <!-- Display FilterToggleButton Trigger on MouseOver -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True"/>

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}"/>

            </MultiDataTrigger.Conditions>

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible"/>

         </MultiDataTrigger>

         <!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->
         <MultiDataTrigger >
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}"/>

               <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"/>

            </MultiDataTrigger.Conditions>

            <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible"/>

            <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1"/>

         </MultiDataTrigger>


         <!-- DataTrigger to disable HitTesting on filtering ToggleButton 
             when there are no DistinctValues-->
         <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}"
                      Value="False">
            <Setter TargetName="toggleButtonBorder"
                    Property="IsHitTestVisible"
                    Value="False"/>

         </DataTrigger>


         <!-- The following 2 triggers allow to display the appropriate Sort Glyph
              depending on the ParentColumn's SortDirection. -->

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Ascending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible"/>

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Descending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}"/>

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible"/>

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">

            <Setter Property="Visibility"
                    Value="Collapsed"/>

         </DataTrigger>


         <Trigger Property="IsBeingDragged"
                  Value="True">

            <Setter TargetName="toggleButtonBorder"
                    Property="Visibility"
                    Value="Hidden"/>

         </Trigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: StatCell 
    ************************** -->
   <ControlTemplate x:Key="compactCardViewStatCellTemplate"
                    TargetType="local:StatCell">

      <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <!-- In CardView, each cell consists of its FieldName followed by its Content. We use
              a Grid to layout both elements, with a SharedSizeGroup on the column that lays out
              the FieldName. In order for this to work as expected, the Row's CellsHost Panel
              must be set as the Grid.IsSharedSizeScope. -->
         <Grid>

            <Grid.ColumnDefinitions>
               <!-- FieldName -->
               <ColumnDefinition SharedSizeGroup="CellFieldName" />

               <!-- Cell Content -->
               <ColumnDefinition Width="*" />

            </Grid.ColumnDefinitions>

            <!-- Horizontal StackPanel used to lay out the FieldName and a colon. -->
            <StackPanel Grid.Column="0"
                        Orientation="Horizontal"
                        HorizontalAlignment="Left">

               <ContentPresenter Grid.Column="0"
                                 Content="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.Title}"
                                 ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.TitleTemplate}"
                                 ContentTemplateSelector="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.TitleTemplateSelector}" />

               <TextBlock x:Name="separatorText"  Text=": " />

            </StackPanel>

            <local:CellContentPresenter Grid.Column="1"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

         </Grid>

      </Border>

      <ControlTemplate.Triggers>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">
            <Setter Property="Visibility"
                    Value="Collapsed"/>
         </DataTrigger>

         <!-- DataTrigger to hide the separatorText when ParentColumn.Title is null or Empty. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.Title, Converter={StaticResource emptyStringToBooleanConverter}}" 
                                        Value="True">
            <Setter TargetName="separatorText"
                    Property="Visibility"
                    Value="Hidden"/>
         </DataTrigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: FilterCell 
    ************************** -->
   <conv:NullToBooleanConverter x:Key="nullToBooleanConverter" />
   <ControlTemplate x:Key="compactCardViewFilterCellTemplate"
                    TargetType="local:FilterCell">

      <Border x:Name="rootBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <!-- In CardView, each cell consists of its FieldName followed by its Content. We use
              a Grid to layout both elements, with a SharedSizeGroup on the column that lays out
              the FieldName. In order for this to work as expected, the Row's CellsHost Panel
              must be set as the Grid.IsSharedSizeScope. -->
         <Grid>

            <Grid.ColumnDefinitions>
               <!-- FieldName -->
               <ColumnDefinition SharedSizeGroup="CellFieldName" />

               <!-- Cell Content -->
               <ColumnDefinition Width="*" />

               <!-- ClearFilter Button-->

               <ColumnDefinition Width="Auto" />

            </Grid.ColumnDefinitions>

            <!-- Horizontal StackPanel used to lay out the FieldName and a colon. -->
            <StackPanel Grid.Column="0"
                        Orientation="Horizontal"
                        HorizontalAlignment="Left">

               <ContentPresenter Grid.Column="0"
                                 Content="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.Title}"
                                 ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.TitleTemplate}"
                                 ContentTemplateSelector="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ParentColumn.TitleTemplateSelector}" />

               <TextBlock x:Name="separatorText" Text=": " />

            </StackPanel>

            <local:CellContentPresenter Grid.Column="1"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

            <Button x:Name="clearFilterButton"                    
                    Focusable="False"
                    Command="local:DataGridCommands.ClearFilter"
                    Cursor="Hand"
                    Visibility="Collapsed"
                    Grid.Column="2"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Template="{StaticResource clearFilterButtonTemplate}"/>

         </Grid>

      </Border>

      <ControlTemplate.Triggers>

         <!-- When changing the appearance (e.g. background/foreground) of the Cell to reflect specific
              states (e.g. IsCurrent), it is recommended to apply the changes directly to the template
              elements because we want those modifications to be effective even when a value has been
              explicitely set to these properties on the TemplatedParent. Also, when someone queries
              the value of these properties on the TemplatedParent, we don't want to return the
              intermediate, state-specific values. -->

         <!-- When the Cell is Current, we want to change its background/foreground to the appropriate brushes.
              We do this only when the cell does not have a validation error because we must give priority
              to the CellErrorStyle (if present).-->

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="HasValidationError"
                          Value="False" />

            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentBackground}" />

            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiTrigger>
            <MultiTrigger.Conditions>

               <Condition Property="IsCurrent"
                          Value="True" />

               <Condition Property="HasValidationError"
                          Value="True" />

               <Condition Property="CellErrorStyle"
                          Value="{x:Null}" />

            </MultiTrigger.Conditions>

            <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentBackground}" />

            <Setter TargetName="rootBorder"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentForeground}" />

         </MultiTrigger>

         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.IsCurrent}"
                          Value="False"/>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasFilter}"
                          Value="False"/>

            </MultiDataTrigger.Conditions>

            <Setter Property="Visibility"
                    Value="Collapsed"/>

         </MultiDataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">
            <Setter Property="Visibility"
                    Value="Collapsed"/>
         </DataTrigger>

         <!-- ContentTemplate will be null if the data type is not handled by the Filtering 
              system, so we set the visibility to collapsed to avoid confusion for the user. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ContentTemplate, Converter={StaticResource nullToBooleanConverter}}"
                      Value="True">
            <Setter Property="Visibility"
                    Value="Collapsed" />
         </DataTrigger>

         <!-- DataTrigger to hide the separatorText when ParentColumn.Title is null or Empty. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.Title, Converter={StaticResource emptyStringToBooleanConverter}}" 
                      Value="True">
            <Setter TargetName="separatorText"
                    Property="Visibility"
                    Value="Hidden"/>
         </DataTrigger>

         <!-- Show the ClearFilter Button if there is a filter value and the 
              ClearFilterButtonVisibility is set to Auto. -->
         <MultiTrigger>
            <MultiTrigger.Conditions>
               <Condition Property="HasFilter"
                          Value="True" />

               <Condition Property="local:FilterCell.ClearFilterButtonVisibility"
                          Value="Auto" />
            </MultiTrigger.Conditions>

            <Setter TargetName="clearFilterButton"
                    Property="Visibility"
                    Value="Visible" />
         </MultiTrigger>

         <!-- Show the ClearFilter Button if the ClearFilterButtonVisibility is set to Always. -->
         <Trigger Property="local:FilterCell.ClearFilterButtonVisibility"
                  Value="Always">
            <Setter TargetName="clearFilterButton"
                    Property="Visibility"
                    Value="Visible" />
         </Trigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: GroupByControl
    ************************** -->
   <ControlTemplate x:Key="compactCardViewGroupByControlTemplate"
                    TargetType="local:GroupByControl">

      <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <!-- This Grid is used to position the ItemsPresenter over the ContentPresenter in charge
              of displaying the NoGroupContent. -->
         <Grid>

            <!-- This ContentPresenter displays the value of the NoGroupContent property
                 of the GroupByControl. This content must only be displayed when there are
                 no groups present, so we set its Visibility to Collapsed by default and
                 it is made visible via a trigger. -->
            <ContentPresenter x:Name="noGroupContentPresenter"
                              Content="{TemplateBinding NoGroupContent}"
                              VerticalAlignment="Center"
                              Visibility="Collapsed" />

            <!-- The GroupByControl is an ItemsControl, so it must have an ItemsPresenter in its
                 Template in order to layout and show its child items. The default ItemsPanel
                 of the GroupByControl is a "StaircasePanel", which layout its items in a
                 staircase-like pattern and draws connecting lines between the items. -->
            <ItemsPresenter />

         </Grid>
      </Border>

      <ControlTemplate.Triggers>

         <!-- When there are no groups, make the NoGroupContent visible. -->
         <Trigger Property="HasItems"
                  Value="False">

            <Setter TargetName="noGroupContentPresenter"
                    Property="Visibility"
                    Value="Visible"/>
         </Trigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: GroupByItem
    ************************** -->
   <ControlTemplate x:Key="compactCardViewGroupByItemTemplate"
                    TargetType="local:GroupByItem">

      <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

         <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
         <StackPanel Orientation="Horizontal">

            <!-- Same ContentPresenter as in the base Cell Template. -->
            <ContentPresenter Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

            <!-- ContentPresenter that is used to display the sort glyph.
                 We explicitely set its Content property to Null to prevent the XAML parser
                 from implicitely setting it to its TemplatedParent's Content. -->
            <ContentPresenter x:Name="sortGlyphPresenter"
                              Content="{x:Null}"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}"
                              Margin="6,0,0,0"
                              Visibility="Hidden" />

         </StackPanel>
      </Border>

      <ControlTemplate.Triggers>

         <!-- The following 2 triggers allow to display the appropriate Sort Glyph
              depending on the ParentColumn's SortDirection. -->
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Ascending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible"/>

         </DataTrigger>

         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Descending">

            <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}"/>

            <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible"/>

         </DataTrigger>
      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: GroupHeaderControl
    ************************** -->
   <ControlTemplate x:Key="compactCardViewGroupHeaderControlTemplate"
                    TargetType="local:GroupHeaderControl">

      <!-- We use an ItemsControl inside the GroupHeaderControl to represent the
           ancestors (ParentGroups) of the Group, and each item in this ItemsControl
           is a Group templated to look like a single, stand-alone GroupHeaderControl. -->

      <ControlTemplate.Resources>

         <DataTemplate x:Key="parentGroupItemTemplate">

            <Grid Margin="0,0,0,1"
                  local:GroupLevelIndicatorPane.ShowIndicators="False"
                  local:GroupLevelIndicatorPane.ShowVerticalBorder="False"
                  local:GroupLevelIndicatorPane.GroupLevel="{Binding Path=Level}">

               <Border Background="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=Background}"
                       BorderBrush="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=BorderBrush}"
                       BorderThickness="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=BorderThickness}"
                       Opacity="{Binding Path=Level, Converter={StaticResource levelToOpacityConverter}, ConverterParameter=0.20}" />

               <!-- This Border is Focusable to make the InputBindings work. -->
               <Border BorderThickness="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=BorderThickness}"
                       Padding="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=Padding}"
                       Background="Transparent"
                       Focusable="True"
                       FocusVisualStyle="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=FocusVisualStyle}">

                  <!-- Define all the standard InputBindings for a GroupHeaderControl. -->
                  <Border.InputBindings>

                     <KeyBinding Command="{x:Static local:DataGridCommands.ToggleGroupExpansion}"
                                 Key="Space" />

                     <MouseBinding Command="{x:Static local:DataGridCommands.ToggleGroupExpansion}"
                                   MouseAction="LeftDoubleClick" />

                  </Border.InputBindings>

                  <DockPanel VerticalAlignment="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=VerticalContentAlignment}">

                     <local:GroupLevelIndicatorPane DockPanel.Dock="Left"
                                                    Indented="False"/>

                     <!-- ToggleButton that is used to expand/collapse the group. -->
                     <ToggleButton DockPanel.Dock="Left"
                                   Focusable="False"
                                   OverridesDefaultStyle="True"
                                   Template="{StaticResource groupExpanderToggleButtonTemplate}"
                                   IsChecked="{Binding IsExpanded}"  />

                     <ContentPresenter Margin="3,0,0,0"
                                       Content="{Binding}"
                                       ContentTemplate="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=ContentTemplate}"
                                       ContentTemplateSelector="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=ContentTemplateSelector}"
                                       HorizontalAlignment="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=local:GroupHeaderControl},Path=HorizontalContentAlignment}" />

                  </DockPanel>
               </Border>
            </Grid>

         </DataTemplate>

      </ControlTemplate.Resources>

      <Border x:Name="mainBorder">

         <StackPanel Orientation="Vertical">

            <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Content.ParentGroups}"
                          Focusable="False"
                          ItemTemplate="{StaticResource parentGroupItemTemplate}" />

            <ContentPresenter Content="{TemplateBinding Content}"
                              ContentTemplate="{StaticResource parentGroupItemTemplate}"
                              HorizontalAlignment="Stretch" />

         </StackPanel>
      </Border>

      <ControlTemplate.Triggers>
         <Trigger Property="local:DataGridControl.NavigationBehavior"
                  Value="None">
            <Setter TargetName="mainBorder"
                    Property="Focusable"
                    Value="False"/>
         </Trigger>
      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: GroupLevelIndicatorPane
    ************************** -->
   <ControlTemplate x:Key="compactCardViewGroupLevelIndicatorPaneTemplate"
                    TargetType="local:GroupLevelIndicatorPane">
      <StackPanel x:Name="PART_GroupLevelIndicatorHost"
                  Orientation="Horizontal"/>
   </ControlTemplate>

   <!--**************************
    * TEMPLATE: HierarchicalGroupLevelIndicatorPane
    ************************** -->
   <ControlTemplate x:Key="compactCardViewHierarchicalGroupLevelIndicatorPaneTemplate"
                    TargetType="local:HierarchicalGroupLevelIndicatorPane">
      <!-- In card view, there is no particular visual style associated with the (Sub)GroupLevelIndicatorPane... therefore, only the named part is present -->
      <StackPanel x:Name="PART_GroupLevelIndicatorHost"
                  Orientation="Horizontal"/>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: AutoFilterControl
    ************************** -->
   <ControlTemplate x:Key="compactCardViewAutoFilterControlTemplate"
                    TargetType="local:AutoFilterControl">
      <Border x:Name="autoFilterControlBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">
         <Grid>
            <Grid.RowDefinitions>
               <RowDefinition Height="Auto"/>
               <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Button DockPanel.Dock="Top"
                    Grid.Row="0"
                    MinHeight="24"
                    Background="{TemplateBinding Background}"
                    Content="{TemplateBinding ClearAutoFilterText}"
                    Command="local:AutoFilterControl.ClearAutoFilterValues"
                    Foreground="{TemplateBinding Foreground}"/>

            <ListBox x:Name="PART_DistinctValuesHost"
                     Grid.Row="1"
                     MaxHeight="350"
                     Width="200"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     Background="{TemplateBinding Background}"
                     BorderThickness="0"
                     ItemTemplate="{TemplateBinding DistinctValueItemTemplate}"
                     ItemTemplateSelector="{TemplateBinding DistinctValueItemTemplateSelector}"
                     ItemContainerStyle="{TemplateBinding DistinctValueItemContainerStyle}"
                     ItemContainerStyleSelector="{TemplateBinding DistinctValueItemContainerStyleSelector}"
                     SelectionMode="Multiple"/>

         </Grid>
      </Border>

   </ControlTemplate>

   <!--**************************
    * TEMPLATE: ScrollTip
    ************************** -->
   <ControlTemplate x:Key="compactCardViewScrollTipTemplate"
                    TargetType="{x:Type local:ScrollTip}">
      <ContentPresenter VerticalAlignment="Bottom"
                        HorizontalAlignment="Center"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
   </ControlTemplate>


</ResourceDictionary>
